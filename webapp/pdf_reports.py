from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime
import os

class PDFReportGenerator:
    def __init__(self):
        self.reports_dir = "static/reports"
        os.makedirs(self.reports_dir, exist_ok=True)
        self.styles = getSampleStyleSheet()
        self._setup_styles()
    
    def _setup_styles(self):
        """Styles personnalis√©s SDV"""
        self.styles.add(ParagraphStyle(
            name='SDVTitle',
            parent=self.styles['Title'],
            fontSize=20,
            spaceAfter=20,
            textColor=colors.HexColor('#007bff'),
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        self.styles.add(ParagraphStyle(
            name='SDVHeader',
            parent=self.styles['Heading1'],
            fontSize=14,
            spaceAfter=12,
            textColor=colors.HexColor('#333333'),
            fontName='Helvetica-Bold'
        ))
        
        self.styles.add(ParagraphStyle(
            name='CodeBlock',
            parent=self.styles['Normal'],
            fontSize=9,
            fontName='Courier',
            backgroundColor=colors.HexColor('#f8f9fa'),
            leftIndent=10,
            rightIndent=10,
            spaceAfter=10
        ))

        # NOUVEAU : Styles pour les nouveaux rapports
        self.styles.add(ParagraphStyle(
            name='section_title',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#333333'),
            fontName='Helvetica-Bold'
        ))

        self.styles.add(ParagraphStyle(
            name='normal',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6
        ))

        self.styles.add(ParagraphStyle(
            name='code',
            parent=self.styles['Normal'],
            fontSize=8,
            fontName='Courier',
            backgroundColor=colors.HexColor('#f8f9fa'),
            leftIndent=10,
            rightIndent=10,
            spaceAfter=8
        ))
    
    def get_colored_style(self, color, bold=False, size=10):
        """Helper pour cr√©er des styles color√©s"""
        font_name = 'Helvetica-Bold' if bold else 'Helvetica'
        return ParagraphStyle(
            name=f'colored_{color}',
            parent=self.styles['Normal'],
            fontSize=size,
            textColor=colors.HexColor(color),
            fontName=font_name
        )

    def _create_header(self, tool_name, target=None):
        """En-t√™te commun - retourne une liste d'√©l√©ments"""
        story = []
        title = Paragraph("üõ° SDV Toolbox - Rapport de S√©curit√©", self.styles['SDVTitle'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Info scan
        info_data = [
            ['Outil:', tool_name],
            ['Date:', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')],
            ['Cible:', target or 'N/A'],
            ['Op√©rateur:', 'SDV Security Team']
        ]
        
        info_table = Table(info_data, colWidths=[1.5*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 30))
        return story

    def _create_header_old(self, story, tool_name, target=None):
        """En-t√™te commun - VERSION POUR COMPATIBILITY"""
        title = Paragraph("üõ° SDV Toolbox - Rapport de S√©curit√©", self.styles['SDVTitle'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Info scan
        info_data = [
            ['Outil:', tool_name],
            ['Date:', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')],
            ['Cible:', target or 'N/A'],
            ['Op√©rateur:', 'SDV Security Team']
        ]
        
        info_table = Table(info_data, colWidths=[1.5*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 30))

    def generate_hydra_report(self, results, target_info):
        """Rapport sp√©cialis√© pour Hydra avec mise en forme am√©lior√©e"""
        filename = f"hydra_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Hydra", target_info))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats de l'attaque Hydra", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Parser les r√©sultats Hydra
        if "SUCC√àS" in results and "Identifiants trouv√©s" in results:
            # Succ√®s - extraire les identifiants
            story.append(Paragraph("üéâ ATTAQUE R√âUSSIE", self.get_colored_style('#28a745', bold=True, size=14)))
            story.append(Spacer(1, 10))
            
            # Extraire login:password des r√©sultats
            import re
            credentials = re.findall(r'login:\s*(\S+)\s+password:\s*(\S+)', results)
            
            if credentials:
                cred_data = [['Login', 'Mot de passe']]
                for login, password in credentials:
                    cred_data.append([login, password])
                
                cred_table = Table(cred_data, colWidths=[200, 200])
                cred_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.green),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(cred_table)
                story.append(Spacer(1, 15))
        
        elif "Service" in results and "ferm√©" in results:
            # Service ferm√©
            story.append(Paragraph("‚ö† SERVICE INACCESSIBLE", self.get_colored_style('#ffc107', bold=True, size=14)))
            story.append(Spacer(1, 10))
            story.append(Paragraph("Le service cible n'est pas accessible ou est prot√©g√© par un firewall.", self.styles['normal']))
            story.append(Spacer(1, 10))
        
        elif "Aucun mot de passe trouv√©" in results:
            # Aucun r√©sultat
            story.append(Paragraph("‚ùå AUCUN R√âSULTAT", self.get_colored_style('#dc3545', bold=True, size=14)))
            story.append(Spacer(1, 10))
            story.append(Paragraph("Aucun mot de passe trouv√© dans la wordlist.", self.styles['normal']))
            story.append(Spacer(1, 10))
        
        # D√©tails techniques
        story.append(Paragraph("D√©tails de l'attaque :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 5))
        
        # Extraire les informations de configuration
        lines = results.split('\n')
        config_data = [['Param√®tre', 'Valeur']]
        
        for line in lines:
            if 'max' in line and 'tasks' in line:
                import re
                tasks = re.search(r'max (\d+) tasks', line)
                if tasks:
                    config_data.append(['T√¢ches simultan√©es', tasks.group(1)])
            elif 'login tries' in line:
                tries = re.search(r'(\d+) login tries', line)
                if tries:
                    config_data.append(['Tentatives de connexion', tries.group(1)])
        
        if len(config_data) > 1:
            config_table = Table(config_data, colWidths=[200, 200])
            config_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(config_table)
            story.append(Spacer(1, 15))
        
        # Log complet (tronqu√©)
        story.append(Paragraph("Log d√©taill√© :", self.get_colored_style('#6c757d', bold=True)))
        story.append(Spacer(1, 5))
        
        import re
        clean_results = re.sub(r'\*\*[^*]*\*\*', '', results)  # Supprimer les marqueurs markdown
        truncated_results = clean_results[:1000] + "..." if len(clean_results) > 1000 else clean_results
        story.append(Paragraph(truncated_results.replace('\n', '<br/>'), self.styles['code']))
        
        # Recommandations
        story.append(Spacer(1, 20))
        story.append(Paragraph("Recommandations de s√©curit√© :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 5))
        
        recommendations = [
            "‚Ä¢ Utilisez des mots de passe complexes et uniques",
            "‚Ä¢ Impl√©mentez une authentification √† deux facteurs (2FA)",
            "‚Ä¢ Limitez les tentatives de connexion (rate limiting)",
            "‚Ä¢ Surveillez les logs d'authentification",
            "‚Ä¢ Utilisez des cl√©s SSH au lieu des mots de passe quand possible"
        ]
        
        for rec in recommendations:
            story.append(Paragraph(rec, self.styles['normal']))
        
        doc.build(story)
        return filename

    def generate_john_report(self, results, hash_info, cracked=False):
        """Rapport sp√©cialis√© pour John the Ripper avec mise en forme am√©lior√©e"""
        filename = f"john_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("John the Ripper", hash_info))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats du crackage John the Ripper", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyser les r√©sultats
        if cracked or "MOT DE PASSE TROUV√â" in results:
            # Succ√®s
            story.append(Paragraph("üéâ HASH CRACK√â AVEC SUCC√àS", self.get_colored_style('#28a745', bold=True, size=14)))
            story.append(Spacer(1, 10))
            
            # Extraire le mot de passe trouv√©
            import re
            password_match = re.search(r':([^:\n]+)$', results, re.MULTILINE)
            if password_match:
                password = password_match.group(1).strip()
                
                result_data = [
                    ['R√©sultat', 'Valeur'],
                    ['Hash crack√©', '‚úÖ OUI'],
                    ['Mot de passe', password],
                    ['M√©thode', 'Dictionnaire (rockyou.txt)']
                ]
                
                result_table = Table(result_data, colWidths=[150, 250])
                result_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.green),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(result_table)
                story.append(Spacer(1, 15))
        else:
            # √âchec
            story.append(Paragraph("‚ùå HASH NON CRACK√â", self.get_colored_style('#dc3545', bold=True, size=14)))
            story.append(Spacer(1, 10))
            
            result_data = [
                ['R√©sultat', 'Valeur'],
                ['Hash crack√©', '‚ùå NON'],
                ['Raison', 'Mot de passe non trouv√© dans rockyou.txt'],
                ['Suggestion', 'Essayer une autre wordlist ou m√©thode']
            ]
            
            result_table = Table(result_data, colWidths=[150, 250])
            result_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.red),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(result_table)
            story.append(Spacer(1, 15))
        
        # Statistiques du crackage
        stats_data = [['M√©trique', 'Valeur']]
        
        import re
        lines = results.split('\n')
        for line in lines:
            if 'password hash' in line and 'loaded' in line:
                stats_data.append(['Hashes charg√©s', '1'])
            elif 'tasks' in line:
                tasks = re.search(r'(\d+) tasks', line)
                if tasks:
                    stats_data.append(['T√¢ches parall√®les', tasks.group(1)])
        
        if len(stats_data) > 1:
            stats_table = Table(stats_data, colWidths=[200, 200])
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(stats_table)
            story.append(Spacer(1, 15))
        
        # Log d√©taill√©
        story.append(Paragraph("Log d√©taill√© :", self.get_colored_style('#6c757d', bold=True)))
        story.append(Spacer(1, 5))
        
        clean_results = results.replace('MOT DE PASSE TROUV√â :', '').strip()
        story.append(Paragraph(clean_results.replace('\n', '<br/>'), self.styles['code']))
        
        # Recommandations
        story.append(Spacer(1, 20))
        story.append(Paragraph("Recommandations de s√©curit√© :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 5))
        
        if cracked:
            recommendations = [
                "‚Ä¢ Ce mot de passe est vuln√©rable et doit √™tre chang√© imm√©diatement",
                "‚Ä¢ Utilisez des mots de passe de 12+ caract√®res avec majuscules, minuscules, chiffres et symboles",
                "‚Ä¢ √âvitez les mots du dictionnaire et les informations personnelles",
                "‚Ä¢ Impl√©mentez une politique de mots de passe robuste",
                "‚Ä¢ Consid√©rez l'utilisation d'un gestionnaire de mots de passe"
            ]
        else:
            recommendations = [
                "‚Ä¢ Le hash r√©siste aux attaques par dictionnaire basiques",
                "‚Ä¢ Continuez √† utiliser des mots de passe complexes",
                "‚Ä¢ Surveillez les nouvelles techniques de crackage",
                "‚Ä¢ Impl√©mentez des mesures de s√©curit√© suppl√©mentaires (2FA, etc.)"
            ]
        
        for rec in recommendations:
            story.append(Paragraph(rec, self.styles['normal']))
        
        doc.build(story)
        return filename

    def generate_theharvester_report(self, results, domain):
        """Rapport sp√©cialis√© pour theHarvester avec mise en forme am√©lior√©e"""
        filename = f"theharvester_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("theHarvester", domain))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats de la reconnaissance theHarvester", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # R√©sum√© des d√©couvertes
        if isinstance(results, dict):
            summary_data = [
                ['Type de donn√©es', 'Quantit√© d√©couverte'],
                ['üìß Adresses email', str(len(results.get('emails', [])))],
                ['üåê Hosts/Sous-domaines', str(len(results.get('hosts', [])))],
                ['üìç Adresses IP', str(len(results.get('ips', [])))],
                ['üì° Num√©ros ASN', str(len(results.get('asns', [])))],
                ['üîó URLs', str(len(results.get('urls', [])))]
            ]
            
            summary_table = Table(summary_data, colWidths=[250, 150])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(summary_table)
            story.append(Spacer(1, 20))
            
            # Emails d√©couverts
            if results.get('emails'):
                story.append(Paragraph("üìß Adresses email d√©couvertes", self.get_colored_style('#28a745', bold=True)))
                story.append(Spacer(1, 5))
                
                email_data = [['Email', 'Domaine']]
                for email in results['emails'][:20]:  # Limiter √† 20 pour l'espace
                    domain_part = email.split('@')[-1] if '@' in email else 'N/A'
                    email_data.append([email, domain_part])
                
                if len(results['emails']) > 20:
                    email_data.append([f"... et {len(results['emails']) - 20} autres", ""])
                
                email_table = Table(email_data, colWidths=[250, 150])
                email_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.green),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(email_table)
                story.append(Spacer(1, 15))
            
            # Adresses IP
            if results.get('ips'):
                story.append(Paragraph("üìç Adresses IP d√©couvertes", self.get_colored_style('#ffc107', bold=True)))
                story.append(Spacer(1, 5))
                
                # Organiser les IPs en colonnes
                ips = results['ips'][:15]  # Limiter √† 15
                ip_data = []
                for i in range(0, len(ips), 3):
                    row = ips[i:i+3]
                    while len(row) < 3:
                        row.append('')
                    ip_data.append(row)
                
                if len(results['ips']) > 15:
                    ip_data.append([f"... et {len(results['ips']) - 15} autres", "", ""])
                
                ip_table = Table(ip_data, colWidths=[130, 130, 130])
                ip_table.setStyle(TableStyle([
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('BACKGROUND', (0, 0), (-1, -1), colors.lightyellow),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(ip_table)
                story.append(Spacer(1, 15))
            
            # Sous-domaines/Hosts
            if results.get('hosts'):
                story.append(Paragraph("üåê Sous-domaines d√©couverts", self.get_colored_style('#17a2b8', bold=True)))
                story.append(Spacer(1, 5))
                
                hosts_text = ""
                for i, host in enumerate(results['hosts'][:10]):  # Limiter √† 10
                    hosts_text += f"‚Ä¢ {host}\n"
                
                if len(results['hosts']) > 10:
                    hosts_text += f"... et {len(results['hosts']) - 10} autres sous-domaines"
                
                story.append(Paragraph(hosts_text.replace('\n', '<br/>'), self.styles['normal']))
                story.append(Spacer(1, 15))
        
        # Analyse de risque
        story.append(Paragraph("‚ö† Analyse de risque", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 5))
        
        if isinstance(results, dict):
            email_count = len(results.get('emails', []))
            ip_count = len(results.get('ips', []))
            
            risk_level = "FAIBLE"
            risk_color = colors.green
            
            if email_count > 10 or ip_count > 5:
                risk_level = "MOYEN"
                risk_color = colors.orange
            
            if email_count > 25 or ip_count > 15:
                risk_level = "√âLEV√â"
                risk_color = colors.red
            
            risk_data = [
                ['M√©trique', 'Valeur', 'Niveau de risque'],
                ['Exposition email', str(email_count), risk_level],
                ['Surface d\'attaque IP', str(ip_count), risk_level]
            ]
            
            risk_table = Table(risk_data, colWidths=[150, 100, 150])
            risk_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.red),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                ('BACKGROUND', (2, 1), (2, -1), risk_color),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(risk_table)
        
        # Recommandations
        story.append(Spacer(1, 20))
        story.append(Paragraph("Recommandations de s√©curit√© :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 5))
        
        recommendations = [
            "‚Ä¢ Limitez l'exposition des adresses email publiques",
            "‚Ä¢ Impl√©mentez des politiques de filtrage anti-spam",
            "‚Ä¢ Surveillez les domaines et sous-domaines expos√©s",
            "‚Ä¢ Utilisez des adresses email de contact d√©di√©es",
            "‚Ä¢ Sensibilisez les employ√©s aux techniques de reconnaissance",
            "‚Ä¢ Surveillez votre pr√©sence sur Internet r√©guli√®rement"
        ]
        
        for rec in recommendations:
            story.append(Paragraph(rec, self.styles['normal']))
        
        doc.build(story)
        return filename

    def generate_ssl_report(self, ssl_data, domain):
        """Rapport SSL sp√©cialis√©"""
        filename = f"ssl_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, 
                              topMargin=0.5*inch, bottomMargin=0.5*inch)
        story = []
        
        # En-t√™te
        self._create_header_old(story, "V√©rificateur SSL/TLS", domain)
        
        # Statut
        is_valid = ssl_data.get('is_valid', False)
        remaining_days = ssl_data.get('remaining_days', 0)
        
        status_text = "‚úÖ Certificat valide" if is_valid else "‚ùå Probl√®me d√©tect√©"
        status_color = colors.green if is_valid else colors.red
        
        story.append(Paragraph(f"Statut: {status_text}", 
                             ParagraphStyle('Status', parent=self.styles['Normal'], 
                                          textColor=status_color, fontSize=12, 
                                          fontName='Helvetica-Bold')))
        story.append(Spacer(1, 15))
        
        # Tableau des informations
        story.append(Paragraph("üìã Informations du certificat", self.styles['SDVHeader']))
        
        cert_data = [
            ['Propri√©t√©', 'Valeur'],
            ['Domaine', ssl_data.get('domain', 'N/A')],
            ['√âmis √†', ssl_data.get('subject', {}).get('CN', 'N/A')],
            ['√âmetteur', ssl_data.get('issuer', {}).get('CN', 'N/A')],
            ['Date d\'expiration', ssl_data.get('expire_date', 'N/A')],
            ['Jours restants', str(remaining_days)],
            ['Auto-sign√©', 'Oui' if ssl_data.get('is_self_signed') else 'Non'],
            ['Algorithme', ssl_data.get('signature_algorithm', 'N/A')],
            ['Version', str(ssl_data.get('version', 'N/A'))],
        ]
        
        cert_table = Table(cert_data, colWidths=[2*inch, 3.5*inch])
        cert_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#007bff')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
        ]))
        
        story.append(cert_table)
        story.append(Spacer(1, 20))
        
        # SAN
        if ssl_data.get('san'):
            story.append(Paragraph("üåê Noms alternatifs (SAN)", self.styles['SDVHeader']))
            for san in ssl_data.get('san', []):
                story.append(Paragraph(f"‚Ä¢ {san}", self.styles['Normal']))
            story.append(Spacer(1, 20))
        
        # Recommandations
        story.append(Paragraph("üõ° Recommandations", self.styles['SDVHeader']))
        
        if remaining_days < 0:
            story.append(Paragraph("üî¥ URGENT: Le certificat est expir√© !", 
                                 ParagraphStyle('Urgent', parent=self.styles['Normal'], 
                                              textColor=colors.red, fontName='Helvetica-Bold')))
        elif remaining_days < 30:
            story.append(Paragraph(f"üü° Attention: Le certificat expire dans {remaining_days} jours", 
                                 ParagraphStyle('Warning', parent=self.styles['Normal'], 
                                              textColor=colors.orange, fontName='Helvetica-Bold')))
        else:
            story.append(Paragraph("‚úÖ Le certificat est valide et n'expire pas prochainement", 
                                 ParagraphStyle('Good', parent=self.styles['Normal'], 
                                              textColor=colors.green)))
        
        doc.build(story)
        return filename
    
    def generate_nmap_report(self, results, target):
        """Rapport Nmap"""
        filename = f"nmap_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        self._create_header_old(story, "Nmap - Scanner de Ports", target)
        
        # Analyser les r√©sultats
        open_ports = len([line for line in results.split('\n') if '/tcp' in line and 'open' in line])
        
        # R√©sum√©
        story.append(Paragraph("üìä R√©sum√© du scan", self.styles['SDVHeader']))
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['Ports ouverts', str(open_ports)],
            ['Statut', 'Scan termin√©'],
            ['Niveau de risque', 'Moyen' if open_ports > 5 else 'Faible']
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 3*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28a745')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # R√©sultats d√©taill√©s
        story.append(Paragraph("üîç R√©sultats d√©taill√©s", self.styles['SDVHeader']))
        
        # Diviser les r√©sultats en chunks pour √©viter les pages trop longues
        results_clean = results.replace('\n', '<br/>')
        if len(results_clean) > 3000:
            results_clean = results_clean[:3000] + '<br/><br/>[... R√©sultats tronqu√©s pour le PDF ...]'
        
        story.append(Paragraph(results_clean, self.styles['CodeBlock']))
        
        doc.build(story)
        return filename
    
    def generate_acunetix_report(self, acunetix_data, target):
        """Rapport sp√©cialis√© pour Acunetix"""
        filename = f"acunetix_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        # En-t√™te
        self._create_header_old(story, "Acunetix Web Scanner", target)
        
        # Statistiques si disponibles
        if acunetix_data.get('statistics'):
            stats = acunetix_data['statistics']
            story.append(Paragraph("üìä Statistiques du scan", self.styles['SDVHeader']))
            
            stats_data = [
                ['M√©trique', 'Valeur'],
                ['Total vuln√©rabilit√©s', str(stats.get('total_vulns', 0))],
                ['Vuln√©rabilit√©s critiques', str(stats.get('high', 0))],
                ['Vuln√©rabilit√©s moyennes', str(stats.get('medium', 0))],
                ['Vuln√©rabilit√©s faibles', str(stats.get('low', 0))],
                ['Pages scann√©es', str(stats.get('pages_scanned', 0))],
                ['Dur√©e du scan', str(stats.get('scan_duration', 'N/A'))]
            ]
            
            stats_table = Table(stats_data, colWidths=[2.5*inch, 2.5*inch])
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#007bff')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
            ]))
            story.append(stats_table)
            story.append(Spacer(1, 20))
        
        # Vuln√©rabilit√©s d√©tect√©es
        if acunetix_data.get('vulnerabilities'):
            story.append(Paragraph("üîç Vuln√©rabilit√©s d√©tect√©es", self.styles['SDVHeader']))
            
            for i, vuln in enumerate(acunetix_data['vulnerabilities'], 1):
                story.append(Paragraph(f"Vuln√©rabilit√© #{i}", self.styles['Heading3']))
                
                # D√©terminer la couleur selon la s√©v√©rit√©
                severity = vuln.get('severity', 'Low').lower()
                if severity == 'high':
                    severity_color = colors.red
                elif severity == 'medium':
                    severity_color = colors.orange
                else:
                    severity_color = colors.green
                
                vuln_data = [
                    ['Propri√©t√©', 'Valeur'],
                    ['Nom', vuln.get('name', 'N/A')],
                    ['S√©v√©rit√©', vuln.get('severity', 'N/A')],
                    ['Description', vuln.get('description', 'N/A')[:300] + '...' if len(vuln.get('description', '')) > 300 else vuln.get('description', 'N/A')],
                    ['Recommandation', vuln.get('recommendation', 'N/A')[:300] + '...' if len(vuln.get('recommendation', '')) > 300 else vuln.get('recommendation', 'N/A')]
                ]
                
                vuln_table = Table(vuln_data, colWidths=[1.5*inch, 4*inch])
                vuln_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), severity_color),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
                ]))
                
                story.append(vuln_table)
                story.append(Spacer(1, 15))
        
        # Recommandations globales
        story.append(Paragraph("üõ° Recommandations globales", self.styles['SDVHeader']))
        
        if acunetix_data.get('statistics', {}).get('high', 0) > 0:
            story.append(Paragraph("üî¥ URGENT: Des vuln√©rabilit√©s critiques ont √©t√© d√©tect√©es", 
                                 ParagraphStyle('Critical', parent=self.styles['Normal'], 
                                              textColor=colors.red, fontName='Helvetica-Bold')))
        
        recommendations = [
            "‚Ä¢ Corrigez en priorit√© les vuln√©rabilit√©s critiques et moyennes",
            "‚Ä¢ Effectuez des tests de r√©gression apr√®s les corrections",
            "‚Ä¢ Planifiez des scans r√©guliers pour maintenir la s√©curit√©",
            "‚Ä¢ Formez l'√©quipe de d√©veloppement aux bonnes pratiques de s√©curit√©",
            "‚Ä¢ Impl√©mentez un processus de d√©veloppement s√©curis√© (SDLC)"
        ]
        
        for rec in recommendations:
            story.append(Paragraph(rec, self.styles['Normal']))
        
        doc.build(story)
        return filename

    def generate_nmap_nse_report(self, results, target, script):
        """Rapport sp√©cialis√© pour Nmap NSE avec mise en forme am√©lior√©e"""
        filename = f"nmap_nse_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Nmap NSE", f"{target} - Script: {script}"))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats du Scan Nmap NSE", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse du script utilis√©
        script_analysis = self._analyze_nse_script(script)
        story.append(Paragraph(f"<b>Type de script :</b> {script_analysis['category']}", self.styles['normal']))
        story.append(Paragraph(f"<b>Objectif :</b> {script_analysis['purpose']}", self.styles['normal']))
        story.append(Spacer(1, 15))
        
        # Extraction des informations importantes
        scan_info = self._extract_nse_info(results, script)
        
        # Tableau des d√©couvertes
        if scan_info['discoveries']:
            discovery_data = [['Type', 'Valeur', 'Statut']]
            for discovery in scan_info['discoveries']:
                discovery_data.append([discovery['type'], discovery['value'], discovery['status']])
            
            discovery_table = Table(discovery_data, colWidths=[1.5*inch, 3*inch, 1*inch])
            discovery_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ]))
            
            story.append(Paragraph("üìä D√©couvertes du scan :", self.get_colored_style('#28a745', bold=True)))
            story.append(Spacer(1, 10))
            story.append(discovery_table)
            story.append(Spacer(1, 20))
        
        # D√©tails techniques
        story.append(Paragraph("üîç D√©tails techniques :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyage et formatage des r√©sultats
        cleaned_results = self._clean_nmap_output(results)
        story.append(Paragraph(f"<font name='Courier' size='8'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations selon le script
        recommendations = self._get_nse_recommendations(script, scan_info)
        story.append(Paragraph("üõ° Recommandations de s√©curit√© :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_nse_script(self, script):
        """Analyse le type de script NSE"""
        script_info = {
            'http-title': {'category': 'Reconnaissance Web', 'purpose': 'R√©cup√©ration des titres de pages web'},
            'ssl-cert': {'category': 'Analyse SSL/TLS', 'purpose': 'Examen des certificats SSL'},
            'ftp-anon': {'category': 'Test d\'authentification', 'purpose': 'D√©tection FTP anonyme'},
            'ssh-hostkey': {'category': 'Cryptographie', 'purpose': '√ânum√©ration des cl√©s SSH'},
            'vuln': {'category': 'D√©tection de vuln√©rabilit√©s', 'purpose': 'Recherche de failles de s√©curit√©'},
            'smb-vuln-ms17-010': {'category': 'Test de vuln√©rabilit√©', 'purpose': 'D√©tection EternalBlue'},
            'http-enum': {'category': '√ânum√©ration Web', 'purpose': 'D√©couverte de r√©pertoires et fichiers'},
            'smb-os-discovery': {'category': 'Reconnaissance OS', 'purpose': 'Identification du syst√®me d\'exploitation'},
            'dns-zone-transfer': {'category': 'Test DNS', 'purpose': 'Tentative de transfert de zone DNS'},
            'http-methods': {'category': 'Analyse HTTP', 'purpose': '√ânum√©ration des m√©thodes HTTP'},
            'http-headers': {'category': 'Analyse HTTP', 'purpose': 'Analyse des en-t√™tes HTTP'},
            'ssl-enum-ciphers': {'category': 'Cryptographie', 'purpose': '√ânum√©ration des chiffrements SSL'},
        }
        return script_info.get(script, {'category': 'Script personnalis√©', 'purpose': 'Analyse sp√©cialis√©e'})

    def _extract_nse_info(self, results, script):
        """Extrait les informations importantes du scan NSE"""
        import re
        
        discoveries = []
        
        # Extraction selon le type de script
        if 'http-title' in script:
            titles = re.findall(r'title:\s*(.+)', results, re.IGNORECASE)
            for title in titles:
                discoveries.append({'type': 'Titre de page', 'value': title.strip(), 'status': 'D√©tect√©'})
        
        elif 'ssl-cert' in script:
            subjects = re.findall(r'subject:\s*(.+)', results, re.IGNORECASE)
            for subject in subjects:
                discoveries.append({'type': 'Certificat SSL', 'value': subject.strip(), 'status': 'D√©tect√©'})
        
        elif 'ftp-anon' in script:
            if 'Anonymous FTP login allowed' in results:
                discoveries.append({'type': 'FTP Anonyme', 'value': 'Acc√®s autoris√©', 'status': 'Vuln√©rable'})
            else:
                discoveries.append({'type': 'FTP Anonyme', 'value': 'Acc√®s refus√©', 'status': 'S√©curis√©'})
        
        elif 'ssh-hostkey' in script:
            keys = re.findall(r'(\d+)\s+(\w+):([a-f0-9:]+)', results)
            for bits, key_type, fingerprint in keys:
                discoveries.append({'type': f'Cl√© SSH {key_type}', 'value': f'{bits} bits', 'status': 'D√©tect√©e'})
        
        elif 'vuln' in script:
            if 'VULNERABLE' in results.upper():
                discoveries.append({'type': 'Vuln√©rabilit√©', 'value': 'Faille d√©tect√©e', 'status': 'CRITIQUE'})
            else:
                discoveries.append({'type': 'Vuln√©rabilit√©', 'value': 'Aucune faille d√©tect√©e', 'status': 'S√©curis√©'})
        
        # Extraction des ports (g√©n√©ral)
        ports = re.findall(r'(\d+)/tcp\s+open\s+(\w+)', results)
        for port, service in ports:
            discoveries.append({'type': 'Port ouvert', 'value': f'TCP/{port} ({service})', 'status': 'Accessible'})
        
        # Extraction des IPs
        ips = re.findall(r'Nmap scan report for .* \(([\d.]+)\)', results)
        for ip in ips:
            discoveries.append({'type': 'Adresse IP', 'value': ip, 'status': 'R√©solue'})
        
        return {'discoveries': discoveries}

    def _clean_nmap_output(self, results):
        """Nettoie et formate la sortie Nmap"""
        import re
        
        # Supprime les caract√®res sp√©ciaux et nettoie
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', results)
        
        # Remplace les retours √† la ligne par des <br/> pour le PDF
        cleaned = cleaned.replace('\n', '<br/>')
        
        # Limite √† 2500 caract√®res pour le PDF
        if len(cleaned) > 2500:
            cleaned = cleaned[:2500] + "<br/><br/>[... R√©sultats tronqu√©s pour optimiser l'affichage PDF ...]"
        
        return cleaned

    def _get_nse_recommendations(self, script, scan_info):
        """Recommandations selon le script NSE utilis√©"""
        recommendations = []
        
        if 'http-title' in script:
            recommendations.extend([
                "V√©rifiez que les titres des pages ne r√©v√®lent pas d'informations sensibles",
                "Assurez-vous que les pages d'erreur ne divulguent pas la technologie utilis√©e",
                "Configurez des en-t√™tes de s√©curit√© appropri√©s (CSP, HSTS, X-Frame-Options)",
                "√âvitez d'exposer des informations de version dans les titres"
            ])
        
        elif 'ssl-cert' in script:
            recommendations.extend([
                "V√©rifiez la validit√© et la date d'expiration des certificats SSL",
                "Utilisez des algorithmes de chiffrement forts (TLS 1.2+ minimum)",
                "Configurez HSTS pour forcer les connexions HTTPS",
                "Surveillez l'expiration des certificats avec des alertes automatiques"
            ])
        
        elif 'vuln' in script:
            has_vuln = any(d for d in scan_info['discoveries'] if d['status'] == 'CRITIQUE')
            if has_vuln:
                recommendations.extend([
                    "üö® URGENT : Appliquez imm√©diatement les correctifs pour les vuln√©rabilit√©s critiques",
                    "Isolez temporairement les syst√®mes vuln√©rables si possible",
                    "Effectuez un scan de v√©rification apr√®s correction",
                    "Mettez en place une surveillance continue des vuln√©rabilit√©s"
                ])
            else:
                recommendations.extend([
                    "Continuez √† surveiller r√©guli√®rement les nouvelles vuln√©rabilit√©s",
                    "Maintenez vos syst√®mes √† jour avec les derniers correctifs de s√©curit√©",
                    "Effectuez des scans de vuln√©rabilit√©s p√©riodiques"
                ])
        
        elif 'ftp-anon' in script:
            recommendations.extend([
                "D√©sactivez l'acc√®s FTP anonyme si non n√©cessaire",
                "Utilisez SFTP ou FTPS pour s√©curiser les transferts de fichiers",
                "Limitez les permissions des comptes FTP au strict minimum",
                "Surveillez les connexions FTP dans vos logs"
            ])
        
        elif 'ssh-hostkey' in script:
            recommendations.extend([
                "V√©rifiez l'authenticit√© des cl√©s SSH affich√©es",
                "Utilisez des cl√©s SSH fortes (RSA 2048+ bits ou Ed25519)",
                "D√©sactivez l'authentification par mot de passe SSH",
                "Surveillez les changements de cl√©s h√¥te SSH"
            ])
        
        else:
            recommendations.extend([
                "Analysez attentivement les r√©sultats du script NSE",
                "V√©rifiez si les services d√©tect√©s sont n√©cessaires √† votre activit√©",
                "Appliquez le principe du moindre privil√®ge sur tous les services",
                "Surveillez r√©guli√®rement l'exposition de vos services r√©seau",
                "Documentez les services l√©gitimes pour future r√©f√©rence"
            ])
        
        return recommendations

    def generate_nikto_report(self, results, target):
        """Rapport sp√©cialis√© pour Nikto avec mise en forme am√©lior√©e"""
        filename = f"nikto_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Nikto", target))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats du Scan Nikto", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Parsing intelligent des r√©sultats Nikto
        nikto_analysis = self._parse_nikto_results(results)
        
        # R√©sum√© des d√©couvertes
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üîç Vuln√©rabilit√©s trouv√©es', str(nikto_analysis['vulnerabilities_count'])],
            ['üìÅ Fichiers expos√©s', str(nikto_analysis['files_exposed'])],
            ['üéØ Niveau de risque', nikto_analysis['risk_level']]
        ]
        
        summary_table = Table(summary_data, colWidths=[200, 200])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Vuln√©rabilit√©s d√©tect√©es
        if nikto_analysis['critical_vulns']:
            story.append(Paragraph("üö® Vuln√©rabilit√©s d√©tect√©es :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            for i, vuln in enumerate(nikto_analysis['critical_vulns'][:5], 1):
                story.append(Paragraph(f"<b>#{i}:</b> {vuln['description']}", self.styles['normal']))
                story.append(Paragraph(f"<b>R√©f√©rence:</b> {vuln['reference']}", self.styles['normal']))
                story.append(Spacer(1, 8))
        
        # D√©tails techniques
        story.append(Paragraph("üîç Log d√©taill√© du scan :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et formater les r√©sultats
        cleaned_results = self._clean_nikto_output(results)
        story.append(Paragraph(f"<font name='Courier' size='8'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_nikto_recommendations(nikto_analysis)
        story.append(Paragraph("üõ° Recommandations de s√©curit√© :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _parse_nikto_results(self, results):
        """Parse intelligent des r√©sultats Nikto"""
        import re
        
        analysis = {
            'vulnerabilities_count': 0,
            'files_exposed': 0,
            'risk_level': 'FAIBLE',
            'critical_vulns': [],
            'sensitive_files': [],
            'missing_headers': []
        }
        
        try:
            lines = results.split('\n')
            
            for line in lines:
                # Compter les vuln√©rabilit√©s
                if any(keyword in line.lower() for keyword in ['osvdb', 'cve-', 'vulnerable']):
                    analysis['vulnerabilities_count'] += 1
                    
                    # Extraire la r√©f√©rence
                    ref = "Nikto DB"
                    if 'OSVDB-' in line:
                        osvdb_match = re.search(r'OSVDB-(\d+)', line)
                        if osvdb_match:
                            ref = f"OSVDB-{osvdb_match.group(1)}"
                    elif 'CVE-' in line:
                        cve_match = re.search(r'(CVE-\d{4}-\d+)', line)
                        if cve_match:
                            ref = cve_match.group(1)
                    
                    analysis['critical_vulns'].append({
                        'type': 'Web Vulnerability',
                        'description': line.strip()[:80] + '...' if len(line.strip()) > 80 else line.strip(),
                        'reference': ref
                    })
                
                # Compter les fichiers expos√©s
                elif any(path in line.lower() for path in ['/admin', '/config', '/backup', '/test']):
                    analysis['files_exposed'] += 1
            
            # D√©terminer le niveau de risque
            if analysis['vulnerabilities_count'] >= 3:
                analysis['risk_level'] = '√âLEV√â'
            elif analysis['vulnerabilities_count'] >= 1:
                analysis['risk_level'] = 'MOYEN'
                
        except Exception as e:
            print(f"[DEBUG] Erreur parsing Nikto: {e}")
        
        return analysis

    def _clean_nikto_output(self, results):
        """Nettoie et formate la sortie Nikto"""
        import re
        
        # Supprime les caract√®res sp√©ciaux
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', results)
        
        # Remplace les retours √† la ligne par des <br/>
        cleaned = cleaned.replace('\n', '<br/>')
        
        # Limite la longueur pour le PDF
        if len(cleaned) > 2500:
            cleaned = cleaned[:2500] + "<br/><br/>[... Log tronqu√© pour le PDF ...]"
        
        return cleaned

    def _get_nikto_recommendations(self, analysis):
        """Recommandations selon les vuln√©rabilit√©s Nikto trouv√©es"""
        recommendations = []
        
        if analysis['risk_level'] == '√âLEV√â':
            recommendations.extend([
                "üö® URGENT : Corrigez les vuln√©rabilit√©s critiques d√©tect√©es",
                "Effectuez un audit de s√©curit√© complet de l'application web"
            ])
        
        recommendations.extend([
            "Configurez les en-t√™tes de s√©curit√© manquants (X-Frame-Options, CSP)",
            "Supprimez ou prot√©gez les fichiers/dossiers sensibles expos√©s",
            "Maintenez votre serveur web et vos applications √† jour",
            "Effectuez des scans Nikto r√©guliers",
            "Impl√©mentez un WAF (Web Application Firewall)"
        ])
        
        return recommendations

    # ===== FONCTIONS AMASS INT√âGR√âES DANS LA CLASSE =====
    def generate_amass_report(self, results, domain, nb_lignes):
        """Rapport sp√©cialis√© pour Amass avec mise en forme magnifique comme Hydra"""
        filename = f"amass_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header SDV
        story.extend(self._create_header("OWASP Amass", domain))
        
        # Titre section avec style
        story.append(Paragraph("‚ñ† R√©sultats de la Reconnaissance Amass", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Parse intelligent des r√©sultats
        amass_analysis = self._parse_amass_results(results, domain)
        
        # TABLEAU R√âSUM√â STYL√â comme Hydra
        if amass_analysis['exposure_level'] == '√âLEV√â':
            status_color = colors.red
            status_text = "üö® EXPOSITION √âLEV√âE"
        elif amass_analysis['exposure_level'] == 'MOYEN':
            status_color = colors.orange  
            status_text = "‚ö† EXPOSITION MOD√âR√âE"
        else:
            status_color = colors.green
            status_text = "‚úÖ EXPOSITION FAIBLE"
        
        story.append(Paragraph(status_text, self.get_colored_style('#dc3545' if amass_analysis['exposure_level'] == '√âLEV√â' else '#ffc107' if amass_analysis['exposure_level'] == 'MOYEN' else '#28a745', bold=True, size=14)))
        story.append(Spacer(1, 10))
        
        # Tableau des m√©triques principales
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üéØ Domaine cible', domain],
            ['üåê Sous-domaines d√©couverts', str(nb_lignes)],
            ['üìç Adresses IP uniques', str(len(amass_analysis['unique_ips']))],
            ['üî• Sous-domaines sensibles', str(len(amass_analysis['interesting_subdomains']))],
            ['üìä Niveau d\'exposition', amass_analysis['exposure_level']]
        ]
        
        summary_table = Table(summary_data, colWidths=[200, 200])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Sous-domaines sensibles d√©tect√©s (style Hydra credentials)
        if amass_analysis['interesting_subdomains']:
            story.append(Paragraph("üî• SOUS-DOMAINES SENSIBLES D√âTECT√âS", self.get_colored_style('#dc3545', bold=True, size=14)))
            story.append(Spacer(1, 10))
            
            # Tableau des sous-domaines critiques
            sensitive_data = [['Sous-domaine', 'Type', 'Niveau de Risque']]
            for subdomain_info in amass_analysis['interesting_subdomains'][:10]:  # Top 10
                risk_color = colors.red if subdomain_info['risk_level'] == '√âLEV√â' else colors.orange
                sensitive_data.append([
                    subdomain_info['subdomain'], 
                    subdomain_info['type'], 
                    subdomain_info['risk_level']
                ])
            
            sensitive_table = Table(sensitive_data, colWidths=[2.5*inch, 1.5*inch, 1*inch])
            sensitive_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.red),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(sensitive_table)
            story.append(Spacer(1, 15))
        
        # Analyse des adresses IP (style technique)
        if amass_analysis['ip_analysis']:
            story.append(Paragraph("üìç Analyse des adresses IP :", self.get_colored_style('#007bff', bold=True)))
            story.append(Spacer(1, 10))
            
            ip_data = [['Adresse IP', 'Occurrences', 'Services d√©tect√©s']]
            for ip_info in amass_analysis['ip_analysis'][:8]:  # Top 8 IPs
                ip_data.append([
                    ip_info['ip'], 
                    str(ip_info['count']), 
                    ', '.join(ip_info['services'][:3])  # 3 premiers services
                ])
            
            ip_table = Table(ip_data, colWidths=[1.5*inch, 1*inch, 2.5*inch])
            ip_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            story.append(ip_table)
            story.append(Spacer(1, 20))
        
        # √âchantillon des r√©sultats (style log Hydra)
        story.append(Paragraph("üîç √âchantillon des d√©couvertes :", self.get_colored_style('#6c757d', bold=True)))
        story.append(Spacer(1, 5))
        
        # Top 30 r√©sultats les plus int√©ressants
        sample_results = '\n'.join(results.split('\n')[:30])
        if len(results.split('\n')) > 30:
            sample_results += f"\n\n... et {len(results.split('\n'))-30} autres sous-domaines d√©couverts"
        
        cleaned_sample = sample_results.replace('\n', '<br/>')
        story.append(Paragraph(f"<font name='Courier' size='8'>{cleaned_sample}</font>", self.styles['code']))
        story.append(Spacer(1, 20))
        
        # Recommandations de s√©curit√© (style Hydra)
        story.append(Paragraph("üõ° Recommandations de s√©curit√© prioritaires :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 5))
        
        recommendations = self._get_amass_recommendations(amass_analysis, nb_lignes)
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _parse_amass_results(self, results, domain):
        """Parse intelligent des r√©sultats Amass"""
        import re
        
        analysis = {
            'unique_ips': set(),
            'interesting_subdomains': [],
            'exposure_level': 'FAIBLE',
            'ip_analysis': []
        }
        
        lines = results.strip().split('\n')
        ip_counts = {}
        
        # Mots-cl√©s critiques pour sous-domaines sensibles
        critical_keywords = {
            'admin': '√âLEV√â', 'api': 'MOYEN', 'dev': '√âLEV√â', 'test': '√âLEV√â',
            'staging': 'MOYEN', 'prod': '√âLEV√â', 'mail': 'MOYEN', 'ftp': 'MOYEN',
            'vpn': '√âLEV√â', 'portal': 'MOYEN', 'login': '√âLEV√â', 'secure': 'MOYEN',
            'internal': '√âLEV√â', 'priv': '√âLEV√â', 'backup': '√âLEV√â', 'db': '√âLEV√â',
            'database': '√âLEV√â', 'sql': '√âLEV√â', 'ssh': 'MOYEN'
        }
        
        for line in lines:
            if line.strip():
                # Extraire les IPs et compter
                ip_matches = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', line)
                for ip in ip_matches:
                    analysis['unique_ips'].add(ip)
                    ip_counts[ip] = ip_counts.get(ip, 0) + 1
                
                # Identifier sous-domaines sensibles
                for keyword, risk in critical_keywords.items():
                    if keyword in line.lower():
                        # Extraire le sous-domaine complet
                        subdomain_match = re.search(r'([a-zA-Z0-9\-\.]+\.' + re.escape(domain) + r')', line)
                        if subdomain_match:
                            subdomain = subdomain_match.group(1)
                            if not any(s['subdomain'] == subdomain for s in analysis['interesting_subdomains']):
                                analysis['interesting_subdomains'].append({
                                    'subdomain': subdomain,
                                    'type': keyword.upper(),
                                    'risk_level': risk
                                })
        
        # Analyse des IPs les plus fr√©quentes
        for ip, count in sorted(ip_counts.items(), key=lambda x: x[1], reverse=True)[:10]:
            # D√©tecter les services depuis les lignes contenant cette IP
            services = set()
            for line in lines:
                if ip in line:
                    if 'mail' in line.lower(): services.add('Mail')
                    if 'web' in line.lower(): services.add('Web')
                    if 'ftp' in line.lower(): services.add('FTP')
                    if 'api' in line.lower(): services.add('API')
            
            analysis['ip_analysis'].append({
                'ip': ip,
                'count': count,
                'services': list(services) if services else ['Unknown']
            })
        
        # D√©terminer niveau d'exposition
        total_subdomains = len(lines)
        high_risk_count = len([s for s in analysis['interesting_subdomains'] if s['risk_level'] == '√âLEV√â'])
        
        if total_subdomains > 100 or high_risk_count > 5:
            analysis['exposure_level'] = '√âLEV√â'
        elif total_subdomains > 50 or high_risk_count > 2:
            analysis['exposure_level'] = 'MOYEN'
        
        return analysis

    def _get_amass_recommendations(self, analysis, nb_lignes):
        """Recommandations adapt√©es au niveau d'exposition"""
        recommendations = []
        
        if analysis['exposure_level'] == '√âLEV√â':
            recommendations.extend([
                "üö® URGENT : Surface d'attaque tr√®s √©tendue d√©tect√©e",
                "Auditez imm√©diatement tous les sous-domaines sensibles (admin, dev, api)",
                "D√©sactivez ou s√©curisez les sous-domaines non essentiels"
            ])
        
        if len(analysis['interesting_subdomains']) > 0:
            recommendations.append("Examinez en priorit√© les sous-domaines d'administration et de d√©veloppement")
        
        if nb_lignes > 100:
            recommendations.append("Consid√©rez l'impl√©mentation d'un WAF pour prot√©ger vos nombreux sous-domaines")
        
        recommendations.extend([
            "Surveillez r√©guli√®rement l'apparition de nouveaux sous-domaines avec des outils de monitoring",
            "Impl√©mentez des certificats SSL/TLS valides sur tous les sous-domaines expos√©s",
            "Configurez une politique de sous-domaines stricte et document√©e",
            "Effectuez des audits p√©riodiques de votre surface d'attaque externe",
            "Mettez en place des alertes automatiques pour les nouveaux sous-domaines d√©tect√©s"
        ])
        
        return recommendations

    def generate_sqlmap_report(self, results, target):
        """Rapport sp√©cialis√© pour SQLMap avec analyse d√©taill√©e"""
        filename = f"sqlmap_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header SDV
        story.extend(self._create_header("SQLMap", target))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats de l'Analyse SQLMap", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Parser intelligent des r√©sultats
        sqlmap_analysis = self._parse_sqlmap_results(results)
        
        # STATUT CRITIQUE avec couleur adapt√©e
        if sqlmap_analysis['is_vulnerable']:
            status_text = "üö® VULN√âRABILIT√âS SQL CRITIQUES D√âTECT√âES"
            status_color = '#dc3545'
            status_bg = colors.red
        else:
            status_text = "‚úÖ AUCUNE VULN√âRABILIT√â SQL D√âTECT√âE"
            status_color = '#28a745'  
            status_bg = colors.green
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # Tableau r√©sum√© avec style professionnel
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üéØ URL analys√©e', target[:60] + '...' if len(target) > 60 else target],
            ['üíâ Vuln√©rabilit√©s SQL', 'üö® OUI - CRITIQUE' if sqlmap_analysis['is_vulnerable'] else '‚úÖ NON'],
            ['üóÉ SGBD d√©tect√©', sqlmap_analysis['database_type']],
            ['üîç Param√®tres test√©s', str(sqlmap_analysis['parameters_tested'])],
            ['‚ö° Techniques utilis√©es', sqlmap_analysis['techniques_found']],
            ['üéØ Niveau de risque', sqlmap_analysis['risk_level']]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Log technique d√©taill√©
        story.append(Paragraph("üîç Extrait du log SQLMap :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et limiter le log
        cleaned_log = self._clean_sqlmap_output(results)
        story.append(Paragraph(f"<font name='Courier' size='7'>{cleaned_log}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations CRITIQUES
        story.append(Paragraph("üõ° RECOMMANDATIONS DE S√âCURIT√â URGENTES", self.get_colored_style('#dc3545', bold=True, size=14)))
        story.append(Spacer(1, 10))
        
        recommendations = self._get_sqlmap_recommendations(sqlmap_analysis)
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _parse_sqlmap_results(self, results):
        """Parse intelligent des r√©sultats SQLMap"""
        import re
        
        analysis = {
            'is_vulnerable': False,
            'database_type': 'Non d√©tect√©',
            'parameters_tested': 0,
            'techniques_found': 'Aucune',
            'risk_level': 'FAIBLE'
        }
        
        try:
            # D√©tecter vuln√©rabilit√©s
            if any(keyword in results.lower() for keyword in ['vulnerable', 'injection', 'payload worked']):
                analysis['is_vulnerable'] = True
                analysis['risk_level'] = 'CRITIQUE'
            
            # Extraire le type de base de donn√©es
            if 'mysql' in results.lower():
                analysis['database_type'] = 'MySQL'
            elif 'postgresql' in results.lower():
                analysis['database_type'] = 'PostgreSQL'
            elif 'oracle' in results.lower():
                analysis['database_type'] = 'Oracle'
            elif 'mssql' in results.lower():
                analysis['database_type'] = 'SQL Server'
            
            # Compter param√®tres test√©s
            param_matches = re.findall(r'testing.*parameter.*\'([^\']+)\'', results, re.IGNORECASE)
            analysis['parameters_tested'] = len(set(param_matches)) if param_matches else 1
            
            # Extraire techniques d'injection
            techniques = []
            if 'boolean' in results.lower():
                techniques.append('Boolean-based')
            if 'time' in results.lower():
                techniques.append('Time-based')
            if 'union' in results.lower():
                techniques.append('UNION query')
            
            analysis['techniques_found'] = ', '.join(techniques) if techniques else 'Standard'
                
        except Exception as e:
            print(f"[DEBUG] Erreur parsing SQLMap: {e}")
        
        return analysis

    def _clean_sqlmap_output(self, results):
        """Nettoie la sortie SQLMap pour le PDF"""
        import re
        
        # Prendre les parties les plus importantes
        lines = results.split('\n')
        important_lines = []
        
        for line in lines[:50]:  # Limiter √† 50 lignes
            if any(keyword in line.lower() for keyword in 
                   ['target', 'parameter', 'injectable', 'payload', 'database', 'version']):
                important_lines.append(line.strip())
        
        # Si pas assez de lignes importantes, prendre le d√©but
        if len(important_lines) < 10:
            important_lines = lines[:30]
        
        cleaned = '\n'.join(important_lines)
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', cleaned)  # Caract√®res ASCII only
        cleaned = cleaned.replace('\n', '<br/>')
        
        if len(cleaned) > 2000:
            cleaned = cleaned[:2000] + '<br/>[... Log tronqu√© pour le PDF ...]'
        
        return cleaned

    def _get_sqlmap_recommendations(self, analysis):
        """Recommandations selon les vuln√©rabilit√©s SQLMap"""
        recommendations = []
        
        if analysis['is_vulnerable']:
            recommendations.extend([
                "üö® URGENT : Vuln√©rabilit√©s d'injection SQL critiques d√©tect√©es",
                "Corrigez imm√©diatement en utilisant des requ√™tes pr√©par√©es (prepared statements)",
                "Validez et √©chappez toutes les entr√©es utilisateur",
                "Impl√©mentez une whitelist stricte pour les param√®tres"
            ])
        else:
            recommendations.extend([
                "Aucune vuln√©rabilit√© SQL d√©tect√©e - Bonne pratique de s√©curit√©",
                "Continuez √† utiliser des requ√™tes pr√©par√©es"
            ])
        
        recommendations.extend([
            "Surveillez les logs de base de donn√©es pour d√©tecter les tentatives d'injection",
            "Impl√©mentez un WAF (Web Application Firewall)",
            "Effectuez des audits de s√©curit√© r√©guliers",
            "Maintenez vos syst√®mes de base de donn√©es √† jour"
        ])
        
        return recommendations

    def generate_postman_report(self, api_data, response_data):
        """Rapport sp√©cialis√© pour Postman/API Testing"""
        filename = f"postman_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("API Testing (Postman)", api_data.get('url', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats du Test d'API", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Statut de la requ√™te
        status_code = response_data.get('status_code', 0)
        if 200 <= status_code < 300:
            status_text = f"‚úÖ SUCC√àS - Code {status_code}"
            status_color = '#28a745'
            status_bg = colors.green
        elif 400 <= status_code < 500:
            status_text = f"‚ö†Ô∏è ERREUR CLIENT - Code {status_code}"
            status_color = '#ffc107'
            status_bg = colors.orange
        elif 500 <= status_code:
            status_text = f"üö® ERREUR SERVEUR - Code {status_code}"
            status_color = '#dc3545'
            status_bg = colors.red
        else:
            status_text = f"‚ùì STATUT INCONNU - Code {status_code}"
            status_color = '#6c757d'
            status_bg = colors.gray
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # D√©tails de la requ√™te
        request_data = [
            ['Param√®tre', 'Valeur'],
            ['üåê URL', api_data.get('url', 'N/A')],
            ['‚ö° M√©thode HTTP', api_data.get('method', 'GET')],
            ['üì¶ Corps de requ√™te', api_data.get('payload', 'Aucun')[:100] + '...' if len(api_data.get('payload', '')) > 100 else api_data.get('payload', 'Aucun')],
            ['üìÖ Date du test', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        request_table = Table(request_data, colWidths=[150, 250])
        request_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP')
        ]))
        story.append(request_table)
        story.append(Spacer(1, 20))
        
        # R√©sultats
        results_text = f"Code de statut: {status_code}\n\n"
        if response_data.get('headers'):
            results_text += "En-t√™tes:\n"
            for key, value in response_data['headers'].items():
                results_text += f"  {key}: {value}\n"
        
        if response_data.get('body'):
            body_preview = response_data['body'][:1000]
            if len(response_data['body']) > 1000:
                body_preview += "\n[... Contenu tronqu√© ...]"
            results_text += f"\nCorps de r√©ponse:\n{body_preview}"
        
        story.append(Paragraph("üîç D√©tails de la r√©ponse :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        story.append(Paragraph(f"<font name='Courier' size='8'>{results_text.replace('<', '&lt;').replace('>', '&gt;').replace('\n', '<br/>')}</font>", self.styles['normal']))
        
        doc.build(story)
        return filename


    def generate_metasploit_report(self, results, metasploit_data):
        """Rapport sp√©cialis√© pour Metasploit avec analyse d'exploitation"""
        filename = f"metasploit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Metasploit Framework", metasploit_data.get('target_info', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† R√©sultats de l'Exploitation Metasploit", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des r√©sultats
        exploit_analysis = self._analyze_metasploit_results(results)
        
        # Statut de l'exploitation
        if exploit_analysis['session_created']:
            status_text = "üéâ EXPLOITATION R√âUSSIE - SESSION OUVERTE"
            status_color = '#28a745'
            status_bg = colors.green
        elif exploit_analysis['exploit_completed']:
            status_text = "‚ö†Ô∏è EXPLOIT TERMIN√â - AUCUNE SESSION"
            status_color = '#ffc107'
            status_bg = colors.orange
        elif exploit_analysis['has_error']:
            status_text = "‚ùå √âCHEC DE L'EXPLOITATION"
            status_color = '#dc3545'
            status_bg = colors.red
        else:
            status_text = "‚ÑπÔ∏è EXPLOITATION EX√âCUT√âE"
            status_color = '#17a2b8'
            status_bg = colors.blue
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # D√©tails de l'exploitation
        exploit_details = [
            ['Param√®tre', 'Valeur'],
            ['üéØ Module d\'exploit', metasploit_data.get('exploit', 'N/A')],
            ['üåê Cible (RHOST)', metasploit_data.get('rhost', 'N/A')],
            ['üîå Port (RPORT)', metasploit_data.get('rport', 'N/A')],
            ['üí• Payload', metasploit_data.get('payload', 'Aucun') or 'Aucun'],
            ['üìÖ Date d\'exploitation', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')],
            ['üéñÔ∏è Statut', exploit_analysis['status']]
        ]
        
        exploit_table = Table(exploit_details, colWidths=[150, 250])
        exploit_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP')
        ]))
        story.append(exploit_table)
        story.append(Spacer(1, 20))
        
        # Log technique d√©taill√©
        story.append(Paragraph("üîç Log d√©taill√© de l'exploitation :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et formater les r√©sultats
        cleaned_results = self._clean_metasploit_output(results)
        story.append(Paragraph(f"<font name='Courier' size='7'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_metasploit_recommendations(exploit_analysis, metasploit_data)
        story.append(Paragraph("üõ°Ô∏è Recommandations de s√©curit√© :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_metasploit_results(self, results):
        """Analyse les r√©sultats Metasploit"""
        import re
        
        analysis = {
            'session_created': False,
            'exploit_completed': False,
            'has_error': False,
            'status': 'Inconnu',
            'sessions': []
        }
        
        try:
            # D√©tecter les sessions cr√©√©es
            if 'Meterpreter session' in results or 'Command shell session' in results:
                analysis['session_created'] = True
                analysis['status'] = 'Session ouverte'
                
                # Extraire les sessions
                session_matches = re.findall(r'(Meterpreter|Command shell) session (\d+) opened', results)
                for session_type, session_id in session_matches:
                    analysis['sessions'].append({
                        'id': session_id,
                        'type': session_type,
                        'info': f'{session_type} session'
                    })
            
            # D√©tecter exploit termin√© sans session
            elif 'Exploit completed, but no session was created' in results:
                analysis['exploit_completed'] = True
                analysis['status'] = 'Exploit termin√© sans session'
            
            # D√©tecter erreurs
            elif any(error in results.lower() for error in ['error', 'failed', 'exception']):
                analysis['has_error'] = True
                analysis['status'] = 'Erreur d√©tect√©e'
            
            else:
                analysis['status'] = 'Exploitation ex√©cut√©e'
                
        except Exception as e:
            print(f"[DEBUG] Erreur analyse Metasploit: {e}")
            analysis['status'] = 'Erreur d\'analyse'
        
        return analysis

    def _clean_metasploit_output(self, results):
        """Nettoie la sortie Metasploit pour le PDF"""
        import re
        
        # Supprimer les codes ANSI
        cleaned = re.sub(r'\x1b[^m]*m', '', results)
        
        # Supprimer les lignes de d√©marrage
        lines = cleaned.split('\n')
        filtered_lines = []
        
        for line in lines:
            if not any(skip in line for skip in [
                'Starting the Metasploit Framework',
                'msf >',
                'msf6 >',
                'Call with "',
                'resource >'
            ]):
                filtered_lines.append(line.strip())
        
        cleaned = '\n'.join(filtered_lines)
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', cleaned)  # ASCII only
        cleaned = cleaned.replace('\n', '<br/>')
        
        if len(cleaned) > 2500:
            cleaned = cleaned[:2500] + '<br/>[... Log tronqu√© pour le PDF ...]'
        
        return cleaned

    def _get_metasploit_recommendations(self, analysis, metasploit_data):
        """Recommandations selon les r√©sultats Metasploit"""
        recommendations = []
        
        if analysis['session_created']:
            recommendations.extend([
                "üö® CRITIQUE : Une session a √©t√© ouverte sur le syst√®me cible",
                "Le syst√®me est vuln√©rable √† l'exploit utilis√©",
                "Appliquez imm√©diatement les correctifs de s√©curit√© appropri√©s",
                "Isolez le syst√®me compromis du r√©seau si possible"
            ])
        elif analysis['exploit_completed']:
            recommendations.extend([
                "‚ö†Ô∏è L'exploit s'est ex√©cut√© mais sans cr√©er de session",
                "Le syst√®me pourrait √™tre partiellement vuln√©rable",
                "V√©rifiez les logs syst√®me pour d√©tecter des anomalies"
            ])
        else:
            recommendations.extend([
                "Aucune exploitation r√©ussie d√©tect√©e",
                "Continuez √† surveiller la s√©curit√© du syst√®me"
            ])
        
        recommendations.extend([
            "Maintenez tous les syst√®mes √† jour avec les derniers correctifs",
            "Impl√©mentez une strat√©gie de d√©fense en profondeur",
            "Surveillez les connexions r√©seau anormales",
            "Effectuez des tests de p√©n√©tration r√©guliers",
            "Formez les √©quipes aux bonnes pratiques de s√©curit√©",
            "Configurez des syst√®mes de d√©tection d'intrusion (IDS/IPS)"
        ])
        
        return recommendations


    def generate_wireshark_report(self, packets, wireshark_data):
        """Rapport sp√©cialis√© pour Wireshark avec analyse de trafic r√©seau"""
        filename = f"wireshark_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Wireshark", wireshark_data.get('capture_info', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† Analyse de Capture R√©seau Wireshark", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse du trafic
        traffic_analysis = self._analyze_wireshark_packets(packets)
        
        # R√©sum√© de la capture
        summary_data = [
            ['Param√®tre', 'Valeur'],
            ['üåê Interface', wireshark_data.get('interface', 'N/A')],
            ['üìä Paquets captur√©s', str(len(packets))],
            ['üîç Filtre appliqu√©', wireshark_data.get('filter', 'Aucun') or 'Aucun'],
            ['üìÖ Date de capture', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')],
            ['‚ö° Protocole principal', traffic_analysis['main_protocol']],
            ['üéØ Activit√© d√©tect√©e', traffic_analysis['activity_level']]
        ]
        
        summary_table = Table(summary_data, colWidths=[150, 250])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # √âchantillon des paquets (premiers 15)
        story.append(Paragraph("üì¶ √âchantillon des paquets captur√©s :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        
        packet_data = [['#', 'Temps', 'Source ‚Üí Destination', 'Protocole']]
        for packet in packets[:15]:
            packet_data.append([
                packet.get('num', '-'),
                packet.get('time', '-')[:8] + 's' if packet.get('time') else '-',
                f"{packet.get('source', '-')} ‚Üí {packet.get('destination', '-')}",
                packet.get('protocol', '-')
            ])
        
        if len(packets) > 15:
            packet_data.append(['...', '...', f'... et {len(packets)-15} autres paquets', '...'])
        
        packet_table = Table(packet_data, colWidths=[30, 60, 200, 60])
        packet_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 7),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(packet_table)
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_wireshark_recommendations(traffic_analysis)
        story.append(Paragraph("üí° Recommandations d'analyse r√©seau :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_wireshark_packets(self, packets):
        """Analyse les paquets Wireshark"""
        analysis = {
            'main_protocol': 'TCP',
            'activity_level': 'NORMALE',
            'protocol_stats': {},
            'top_communications': []
        }
        
        try:
            if not packets:
                return analysis
            
            # Compter les protocoles
            protocol_count = {}
            for packet in packets:
                protocol = packet.get('protocol', 'UNKNOWN')
                protocol_count[protocol] = protocol_count.get(protocol, 0) + 1
            
            # Protocole principal
            if protocol_count:
                analysis['main_protocol'] = max(protocol_count, key=protocol_count.get)
                analysis['protocol_stats'] = protocol_count
            
            # Niveau d'activit√© bas√© sur le nombre de paquets
            packet_count = len(packets)
            if packet_count > 50:
                analysis['activity_level'] = '√âLEV√âE'
            elif packet_count > 20:
                analysis['activity_level'] = 'MOD√âR√âE'
            else:
                analysis['activity_level'] = 'FAIBLE'
                
        except Exception as e:
            print(f"[DEBUG] Erreur analyse Wireshark: {e}")
        
        return analysis

    def _get_wireshark_recommendations(self, analysis):
        """Recommandations bas√©es sur l'analyse Wireshark"""
        recommendations = []
        
        if analysis['activity_level'] == '√âLEV√âE':
            recommendations.append("üîç Activit√© r√©seau √©lev√©e d√©tect√©e - Surveillez le trafic anormal")
        
        if 'HTTP' in analysis.get('protocol_stats', {}):
            recommendations.append("‚ö†Ô∏è Trafic HTTP d√©tect√© - Privil√©giez HTTPS pour la s√©curit√©")
        
        recommendations.extend([
            "üìä Analysez r√©guli√®rement le trafic r√©seau pour d√©tecter les anomalies",
            "üîí Surveillez les connexions vers des IPs externes inconnues",
            "üõ°Ô∏è Impl√©mentez une surveillance r√©seau continue (SIEM)",
            "üìà Documentez les patterns de trafic normal pour d√©tecter les d√©viations",
            "üö® Configurez des alertes pour les protocoles inhabituels",
            "üîç Effectuez des analyses de trafic p√©riodiques avec Wireshark"
        ])
        
        return recommendations


    def generate_zap_report(self, results_html, zap_data):
        """Rapport sp√©cialis√© pour OWASP ZAP avec analyse de vuln√©rabilit√©s"""
        filename = f"zap_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("OWASP ZAP", zap_data.get('target', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† Rapport de S√©curit√© OWASP ZAP", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des alertes ZAP
        zap_analysis = self._analyze_zap_alerts([])
        
        # Statut de s√©curit√©
        if zap_analysis['critical_count'] > 0:
            status_text = "üö® VULN√âRABILIT√âS CRITIQUES D√âTECT√âES"
            status_color = '#dc3545'
            status_bg = colors.red
        elif zap_analysis['high_count'] > 0:
            status_text = "‚ö†Ô∏è VULN√âRABILIT√âS √âLEV√âES D√âTECT√âES"
            status_color = '#ff6b35'
            status_bg = colors.orange
        elif zap_analysis['medium_count'] > 0:
            status_text = "‚ö° VULN√âRABILIT√âS MOYENNES D√âTECT√âES"
            status_color = '#ffc107'
            status_bg = colors.yellow
        else:
            status_text = "‚úÖ AUCUNE VULN√âRABILIT√â CRITIQUE D√âTECT√âE"
            status_color = '#28a745'
            status_bg = colors.green
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # R√©sum√© des vuln√©rabilit√©s
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üéØ URL analys√©e', zap_data.get('target', 'N/A')],
            ['üö® Vuln√©rabilit√©s critiques', str(zap_analysis['critical_count'])],
            ['‚ö†Ô∏è Vuln√©rabilit√©s √©lev√©es', str(zap_analysis['high_count'])],
            ['‚ö° Vuln√©rabilit√©s moyennes', str(zap_analysis['medium_count'])],
            ['‚ÑπÔ∏è Vuln√©rabilit√©s faibles', str(zap_analysis['low_count'])],
            ['üìä Total vuln√©rabilit√©s', str(zap_analysis['total_count'])],
            ['üìÖ Date du scan', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Top vuln√©rabilit√©s critiques
        if zap_analysis['top_vulnerabilities']:
            story.append(Paragraph("üö® Vuln√©rabilit√©s prioritaires :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            vuln_data = [['Vuln√©rabilit√©', 'Risque', 'URL affect√©e']]
            for vuln in zap_analysis['top_vulnerabilities'][:10]:
                risk_color = self._get_risk_color(vuln['risk'])
                vuln_data.append([
                    vuln['name'][:40] + '...' if len(vuln['name']) > 40 else vuln['name'],
                    vuln['risk'],
                    vuln['url'][:40] + '...' if len(vuln['url']) > 40 else vuln['url']
                ])
            
            vuln_table = Table(vuln_data, colWidths=[200, 80, 120])
            vuln_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            story.append(vuln_table)
            story.append(Spacer(1, 20))
        
        # Cat√©gories de vuln√©rabilit√©s
        if zap_analysis['vulnerability_categories']:
            story.append(Paragraph("üìä Cat√©gories de vuln√©rabilit√©s :", self.get_colored_style('#007bff', bold=True)))
            story.append(Spacer(1, 10))
            
            cat_data = [['Cat√©gorie', 'Occurrences']]
            for category, count in zap_analysis['vulnerability_categories'].items():
                cat_data.append([category, str(count)])
            
            cat_table = Table(cat_data, colWidths=[250, 100])
            cat_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(cat_table)
            story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_zap_recommendations(zap_analysis)
        story.append(Paragraph("üõ°Ô∏è Recommandations de s√©curit√© prioritaires :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_zap_alerts(self, alerts):
        """Analyse les alertes OWASP ZAP"""
        analysis = {
            'critical_count': 0,
            'high_count': 0,
            'medium_count': 0,
            'low_count': 0,
            'total_count': len(alerts),
            'top_vulnerabilities': [],
            'vulnerability_categories': {}
        }
        
        try:
            for alert in alerts:
                risk = alert.get('risk', 'Low')
                name = alert.get('alert', 'Unknown')
                url = alert.get('url', 'N/A')
                
                # Compter par niveau de risque
                if risk == 'High':
                    analysis['high_count'] += 1
                elif risk == 'Medium':
                    analysis['medium_count'] += 1
                elif risk == 'Low':
                    analysis['low_count'] += 1
                
                # Top vuln√©rabilit√©s
                analysis['top_vulnerabilities'].append({
                    'name': name,
                    'risk': risk,
                    'url': url
                })
                
                # Cat√©gories
                category = name.split(' ')[0]  # Premier mot comme cat√©gorie
                analysis['vulnerability_categories'][category] = analysis['vulnerability_categories'].get(category, 0) + 1
            
            # Trier par risque
            risk_order = {'High': 3, 'Medium': 2, 'Low': 1}
            analysis['top_vulnerabilities'].sort(key=lambda x: risk_order.get(x['risk'], 0), reverse=True)
            
        except Exception as e:
            print(f"[DEBUG] Erreur analyse ZAP: {e}")
        
        return analysis

    def _get_risk_color(self, risk):
        """Retourne la couleur selon le niveau de risque"""
        if risk == 'High':
            return colors.red
        elif risk == 'Medium':
            return colors.orange
        elif risk == 'Low':
            return colors.yellow
        return colors.gray

    def _get_zap_recommendations(self, analysis):
        """Recommandations selon les vuln√©rabilit√©s ZAP"""
        recommendations = []
        
        if analysis['high_count'] > 0:
            recommendations.extend([
                "üö® URGENT : Corrigez imm√©diatement les vuln√©rabilit√©s de niveau √©lev√©",
                "Effectuez un audit de code approfondi",
                "Isolez l'application si elle est en production"
            ])
        
        if analysis['medium_count'] > 0:
            recommendations.append("‚ö° Planifiez la correction des vuln√©rabilit√©s moyennes dans les plus brefs d√©lais")
        
        recommendations.extend([
            "üîí Impl√©mentez une validation stricte des entr√©es utilisateur",
            "üõ°Ô∏è Configurez des en-t√™tes de s√©curit√© appropri√©s (CSP, HSTS, X-Frame-Options)",
            "üîê Utilisez HTTPS pour toutes les communications",
            "üìä Effectuez des scans ZAP r√©guliers",
            "üîÑ Int√©grez ZAP dans votre pipeline CI/CD",
            "üë• Formez l'√©quipe de d√©veloppement aux bonnes pratiques OWASP",
            "üìã Suivez le guide OWASP Top 10 pour pr√©venir les vuln√©rabilit√©s"
        ])
        
        return recommendations


    def generate_burpsuite_report(self, issues, burp_data):
        """Rapport sp√©cialis√© pour Burp Suite avec analyse de vuln√©rabilit√©s"""
        filename = f"burpsuite_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Burp Suite", burp_data.get('filename', 'Rapport import√©')))
        
        # Titre section
        story.append(Paragraph("‚ñ† Analyse de S√©curit√© Burp Suite", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des issues Burp Suite
        burp_analysis = self._analyze_burpsuite_issues(issues)
        
        # Statut de s√©curit√©
        if burp_analysis['high_count'] > 0:
            status_text = "üö® VULN√âRABILIT√âS CRITIQUES D√âTECT√âES"
            status_color = '#dc3545'
            status_bg = colors.red
        elif burp_analysis['medium_count'] > 0:
            status_text = "‚ö†Ô∏è VULN√âRABILIT√âS MOYENNES D√âTECT√âES"
            status_color = '#ffc107'
            status_bg = colors.orange
        elif burp_analysis['low_count'] > 0:
            status_text = "‚ÑπÔ∏è VULN√âRABILIT√âS FAIBLES D√âTECT√âES"
            status_color = '#17a2b8'
            status_bg = colors.blue
        else:
            status_text = "‚úÖ AUCUNE VULN√âRABILIT√â D√âTECT√âE"
            status_color = '#28a745'
            status_bg = colors.green
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # R√©sum√© des vuln√©rabilit√©s
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üìÑ Fichier analys√©', burp_data.get('filename', 'N/A')],
            ['üö® Vuln√©rabilit√©s √©lev√©es', str(burp_analysis['high_count'])],
            ['‚ö†Ô∏è Vuln√©rabilit√©s moyennes', str(burp_analysis['medium_count'])],
            ['‚ÑπÔ∏è Vuln√©rabilit√©s faibles', str(burp_analysis['low_count'])],
            ['üìä Total vuln√©rabilit√©s', str(burp_analysis['total_count'])],
            ['üéØ Hosts affect√©s', str(len(burp_analysis['affected_hosts']))],
            ['üìÖ Date d\'analyse', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Top vuln√©rabilit√©s critiques
        if burp_analysis['top_issues']:
            story.append(Paragraph("üö® Vuln√©rabilit√©s prioritaires :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            vuln_data = [['Vuln√©rabilit√©', 'Gravit√©', 'Host']]
            for issue in burp_analysis['top_issues'][:10]:
                severity_color = self._get_burp_severity_color(issue['severity'])
                vuln_data.append([
                    issue['name'][:50] + '...' if len(issue['name']) > 50 else issue['name'],
                    issue['severity'],
                    issue['host'][:30] + '...' if len(issue['host']) > 30 else issue['host']
                ])
            
            vuln_table = Table(vuln_data, colWidths=[200, 80, 120])
            vuln_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            story.append(vuln_table)
            story.append(Spacer(1, 20))
        
        # Cat√©gories de vuln√©rabilit√©s
        if burp_analysis['issue_categories']:
            story.append(Paragraph("üìä Cat√©gories de vuln√©rabilit√©s :", self.get_colored_style('#007bff', bold=True)))
            story.append(Spacer(1, 10))
            
            cat_data = [['Cat√©gorie', 'Occurrences']]
            for category, count in list(burp_analysis['issue_categories'].items())[:10]:
                cat_data.append([category[:40] + '...' if len(category) > 40 else category, str(count)])
            
            cat_table = Table(cat_data, colWidths=[300, 100])
            cat_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(cat_table)
            story.append(Spacer(1, 20))
        
        # Hosts affect√©s
        if burp_analysis['affected_hosts']:
            story.append(Paragraph("üéØ Hosts affect√©s :", self.get_colored_style('#ffc107', bold=True)))
            story.append(Spacer(1, 10))
            
            hosts_text = ""
            for host in list(burp_analysis['affected_hosts'])[:10]:
                hosts_text += f"‚Ä¢ {host}\n"
            
            if len(burp_analysis['affected_hosts']) > 10:
                hosts_text += f"... et {len(burp_analysis['affected_hosts']) - 10} autres hosts"
            
            story.append(Paragraph(hosts_text.replace('\n', '<br/>'), self.styles['normal']))
            story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_burpsuite_recommendations(burp_analysis)
        story.append(Paragraph("üõ°Ô∏è Recommandations de s√©curit√© prioritaires :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_burpsuite_issues(self, issues):
        """Analyse les issues Burp Suite"""
        analysis = {
            'high_count': 0,
            'medium_count': 0,
            'low_count': 0,
            'info_count': 0,
            'total_count': len(issues),
            'top_issues': [],
            'issue_categories': {},
            'affected_hosts': set()
        }
        
        try:
            for issue in issues:
                # Extraire les donn√©es selon le format XML ou HTML
                name_elem = issue.find('name') or issue.find('td', class_='name')
                severity_elem = issue.find('severity') or issue.find('td', class_='severity')
                host_elem = issue.find('host') or issue.find('td', class_='host')
                
                name = name_elem.text.strip() if name_elem else 'Vuln√©rabilit√© inconnue'
                severity = severity_elem.text.strip() if severity_elem else 'Low'
                host = host_elem.text.strip() if host_elem else 'Inconnu'
                
                # Compter par s√©v√©rit√©
                if severity == 'High':
                    analysis['high_count'] += 1
                elif severity == 'Medium':
                    analysis['medium_count'] += 1
                elif severity == 'Low':
                    analysis['low_count'] += 1
                else:
                    analysis['info_count'] += 1
                
                # Top issues
                analysis['top_issues'].append({
                    'name': name,
                    'severity': severity,
                    'host': host
                })
                
                # Cat√©gories
                analysis['issue_categories'][name] = analysis['issue_categories'].get(name, 0) + 1
                
                # Hosts affect√©s
                if host and host != 'Inconnu':
                    analysis['affected_hosts'].add(host)
            
            # Trier par s√©v√©rit√©
            severity_order = {'High': 4, 'Medium': 3, 'Low': 2, 'Information': 1}
            analysis['top_issues'].sort(key=lambda x: severity_order.get(x['severity'], 0), reverse=True)
            
        except Exception as e:
            print(f"[DEBUG] Erreur analyse Burp Suite: {e}")
        
        return analysis

    def _get_burp_severity_color(self, severity):
        """Retourne la couleur selon la s√©v√©rit√© Burp Suite"""
        if severity == 'High':
            return colors.red
        elif severity == 'Medium':
            return colors.orange
        elif severity == 'Low':
            return colors.yellow
        return colors.gray

    def _get_burpsuite_recommendations(self, analysis):
        """Recommandations selon les vuln√©rabilit√©s Burp Suite"""
        recommendations = []
        
        if analysis['high_count'] > 0:
            recommendations.extend([
                "üö® URGENT : Corrigez imm√©diatement les vuln√©rabilit√©s de niveau √©lev√©",
                "Isolez les applications vuln√©rables si elles sont en production",
                "Effectuez un audit de code approfondi"
            ])
        
        if analysis['medium_count'] > 0:
            recommendations.append("‚ö†Ô∏è Planifiez la correction des vuln√©rabilit√©s moyennes rapidement")
        
        recommendations.extend([
            "üîí Impl√©mentez une validation stricte des entr√©es utilisateur",
            "üõ°Ô∏è Configurez des en-t√™tes de s√©curit√© appropri√©s",
            "üîê Utilisez HTTPS pour toutes les communications sensibles",
            "üìä Int√©grez Burp Suite dans vos tests de s√©curit√© r√©guliers",
            "üîÑ Effectuez des scans automatis√©s dans votre pipeline CI/CD",
            "üë• Formez l'√©quipe de d√©veloppement aux vuln√©rabilit√©s web OWASP",
            "üìã Impl√©mentez une politique de d√©veloppement s√©curis√©",
            "üîç Effectuez des tests de p√©n√©tration r√©guliers"
        ])
        
        return recommendations

    def generate_wapiti_report(self, results, wapiti_data):
        """Rapport sp√©cialis√© pour Wapiti avec analyse de vuln√©rabilit√©s"""
        filename = f"wapiti_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Wapiti", wapiti_data.get('url', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† Rapport de S√©curit√© Web Wapiti", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des r√©sultats Wapiti
        wapiti_analysis = self._analyze_wapiti_results(results)
        
        # Statut de s√©curit√©
        if wapiti_analysis['vulnerabilities_found'] > 0:
            status_text = "üö® VULN√âRABILIT√âS WEB D√âTECT√âES"
            status_color = '#dc3545'
            status_bg = colors.red
        elif wapiti_analysis['warnings_found'] > 0:
            status_text = "‚ö†Ô∏è AVERTISSEMENTS D√âTECT√âS"
            status_color = '#ffc107'
            status_bg = colors.orange
        else:
            status_text = "‚úÖ AUCUNE VULN√âRABILIT√â CRITIQUE D√âTECT√âE"
            status_color = '#28a745'
            status_bg = colors.green
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # R√©sum√© du scan
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üéØ URL scann√©e', wapiti_data.get('url', 'N/A')],
            ['üö® Vuln√©rabilit√©s trouv√©es', str(wapiti_analysis['vulnerabilities_found'])],
            ['‚ö†Ô∏è Avertissements', str(wapiti_analysis['warnings_found'])],
            ['üìä Pages analys√©es', str(wapiti_analysis['pages_scanned'])],
            ['üîç Type de scan', wapiti_analysis['scan_type']],
            ['üìÖ Date du scan', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Vuln√©rabilit√©s d√©tect√©es
        if wapiti_analysis['vulnerability_types']:
            story.append(Paragraph("üö® Types de vuln√©rabilit√©s d√©tect√©es :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            vuln_data = [['Type de vuln√©rabilit√©', 'Occurrences', 'Criticit√©']]
            for vuln_type, count in wapiti_analysis['vulnerability_types'].items():
                criticite = self._get_wapiti_criticality(vuln_type)
                vuln_data.append([vuln_type, str(count), criticite])
            
            vuln_table = Table(vuln_data, colWidths=[200, 80, 120])
            vuln_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(vuln_table)
            story.append(Spacer(1, 20))
        
        # URLs affect√©es
        if wapiti_analysis['affected_urls']:
            story.append(Paragraph("üéØ URLs affect√©es :", self.get_colored_style('#ffc107', bold=True)))
            story.append(Spacer(1, 10))
            
            urls_text = ""
            for url in wapiti_analysis['affected_urls'][:10]:
                urls_text += f"‚Ä¢ {url}\n"
            
            if len(wapiti_analysis['affected_urls']) > 10:
                urls_text += f"... et {len(wapiti_analysis['affected_urls']) - 10} autres URLs"
            
            story.append(Paragraph(urls_text.replace('\n', '<br/>'), self.styles['normal']))
            story.append(Spacer(1, 20))
        
        # Extrait du rapport technique
        story.append(Paragraph("üîç Extrait du rapport technique :", self.get_colored_style('#007bff', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et formater les r√©sultats
        cleaned_results = self._clean_wapiti_output(results)
        story.append(Paragraph(f"<font name='Courier' size='7'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_wapiti_recommendations(wapiti_analysis)
        story.append(Paragraph("üõ°Ô∏è Recommandations de s√©curit√© web :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_wapiti_results(self, results):
        """Analyse les r√©sultats Wapiti"""
        import re
        
        analysis = {
            'vulnerabilities_found': 0,
            'warnings_found': 0,
            'pages_scanned': 0,
            'scan_type': 'Scan web complet',
            'vulnerability_types': {},
            'affected_urls': []
        }
        
        try:
            # Compter les vuln√©rabilit√©s
            vuln_patterns = [
                r'vulnerability|vuln',
                r'injection|xss|sql',
                r'csrf|rfi|lfi',
                r'security|exploit'
            ]
            
            for pattern in vuln_patterns:
                matches = re.findall(pattern, results, re.IGNORECASE)
                analysis['vulnerabilities_found'] += len(matches)
            
            # Compter les avertissements
            warning_patterns = ['warning', 'potential', 'possible', 'suspicious']
            for pattern in warning_patterns:
                matches = re.findall(pattern, results, re.IGNORECASE)
                analysis['warnings_found'] += len(matches)
            
            # Extraire types de vuln√©rabilit√©s
            if 'xss' in results.lower():
                analysis['vulnerability_types']['Cross-Site Scripting (XSS)'] = results.lower().count('xss')
            if 'sql' in results.lower():
                analysis['vulnerability_types']['SQL Injection'] = results.lower().count('sql')
            if 'csrf' in results.lower():
                analysis['vulnerability_types']['Cross-Site Request Forgery'] = results.lower().count('csrf')
            if 'lfi' in results.lower() or 'rfi' in results.lower():
                analysis['vulnerability_types']['File Inclusion'] = results.lower().count('lfi') + results.lower().count('rfi')
            
            # Extraire URLs
            url_matches = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', results)
            analysis['affected_urls'] = list(set(url_matches))[:20]  # Max 20 URLs uniques
            
            # Estimer pages scann√©es
            if 'page' in results.lower():
                page_matches = re.findall(r'(\d+)\s*page', results, re.IGNORECASE)
                if page_matches:
                    analysis['pages_scanned'] = int(page_matches[-1])
                else:
                    analysis['pages_scanned'] = len(analysis['affected_urls'])
            
        except Exception as e:
            print(f"[DEBUG] Erreur analyse Wapiti: {e}")
        
        return analysis

    def _get_wapiti_criticality(self, vuln_type):
        """Retourne la criticit√© selon le type de vuln√©rabilit√©"""
        critical_vulns = ['SQL Injection', 'Cross-Site Scripting (XSS)']
        medium_vulns = ['Cross-Site Request Forgery', 'File Inclusion']
        
        if vuln_type in critical_vulns:
            return 'CRITIQUE'
        elif vuln_type in medium_vulns:
            return 'MOYENNE'
        return 'FAIBLE'

    def _clean_wapiti_output(self, results):
        """Nettoie la sortie Wapiti pour le PDF"""
        import re
        
        # Prendre les parties importantes
        lines = results.split('\n')
        important_lines = []
        
        for line in lines[:40]:
            if any(keyword in line.lower() for keyword in 
                   ['vulnerability', 'found', 'target', 'scan', 'warning', 'error']):
                important_lines.append(line.strip())
        
        if len(important_lines) < 15:
            important_lines = lines[:25]
        
        cleaned = '\n'.join(important_lines)
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', cleaned)
        cleaned = cleaned.replace('\n', '<br/>')
        
        if len(cleaned) > 2000:
            cleaned = cleaned[:2000] + '<br/>[... Log tronqu√© pour le PDF ...]'
        
        return cleaned

    def _get_wapiti_recommendations(self, analysis):
        """Recommandations selon les vuln√©rabilit√©s Wapiti"""
        recommendations = []
        
        if analysis['vulnerabilities_found'] > 0:
            recommendations.extend([
                "üö® URGENT : Corrigez les vuln√©rabilit√©s web d√©tect√©es",
                "Validez et √©chappez toutes les entr√©es utilisateur",
                "Impl√©mentez une protection CSRF appropri√©e"
            ])
        
        if 'Cross-Site Scripting (XSS)' in analysis['vulnerability_types']:
            recommendations.append("üîí Impl√©mentez une politique CSP (Content Security Policy) stricte")
        
        if 'SQL Injection' in analysis['vulnerability_types']:
            recommendations.append("üíâ Utilisez des requ√™tes pr√©par√©es pour toutes les interactions avec la base de donn√©es")
        
        recommendations.extend([
            "üõ°Ô∏è Configurez des en-t√™tes de s√©curit√© appropri√©s",
            "üîê Utilisez HTTPS pour toutes les communications",
            "üìä Effectuez des scans Wapiti r√©guliers",
            "üîÑ Int√©grez Wapiti dans votre pipeline CI/CD",
            "üë• Formez l'√©quipe aux vuln√©rabilit√©s web OWASP Top 10",
            "üìã Impl√©mentez un processus de d√©veloppement s√©curis√©",
            "üîç Effectuez des tests de p√©n√©tration p√©riodiques"
        ])
        
        return recommendations

    def generate_ettercap_report(self, results, ettercap_data):
        """Rapport sp√©cialis√© pour Ettercap avec analyse d'attaque MITM"""
        filename = f"ettercap_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Ettercap MITM", ettercap_data.get('attack_info', 'N/A')))
        
        # Titre section
        story.append(Paragraph("Rapport d'Attaque Man-in-the-Middle", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des r√©sultats Ettercap
        ettercap_analysis = self._analyze_ettercap_results(results, ettercap_data.get('captured_data', {}))
        
        # Statut de l'attaque
        if ettercap_analysis['mitm_successful']:
            status_text = "ATTAQUE MITM REUSSIE - TRAFIC INTERCEPTE"
            status_color = '#dc3545'
            status_bg = colors.red
        elif ettercap_analysis['simulation_mode']:
            status_text = "MODE SIMULATION - ATTAQUE MITM SIMULEE"
            status_color = '#ffc107'
            status_bg = colors.orange
        else:
            status_text = "ECHEC DE L'ATTAQUE MITM"
            status_color = '#6c757d'
            status_bg = colors.gray
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # R√©sum√© de l'attaque
        summary_data = [
            ['Parametre', 'Valeur'],
            ['Configuration', ettercap_data.get('attack_info', 'N/A')],
            ['Paquets interceptes', str(ettercap_analysis['total_packets'])],
            ['Paquets HTTP', str(ettercap_analysis['http_packets'])],
            ['Paquets HTTPS', str(ettercap_analysis['https_packets'])],
            ['Requetes DNS', str(ettercap_analysis['dns_packets'])],
            ['Type attaque', ettercap_analysis['attack_type']],
            ['Date attaque', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Informations de la cible
        if ettercap_analysis['target_detected']:
            story.append(Paragraph("Informations de la cible :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            target_data = [['Propriete', 'Valeur']]
            target_info = ettercap_analysis['target_info']
            for key, value in target_info.items():
                if value and value != 'N/A':
                    target_data.append([key.upper(), str(value)])
            
            target_table = Table(target_data, colWidths=[150, 250])
            target_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(target_table)
            story.append(Spacer(1, 20))
        
        # Paquets intercept√©s d√©taill√©s
        if ettercap_analysis['intercepted_packets']:
            story.append(Paragraph("Detail des paquets interceptes :", self.get_colored_style('#007bff', bold=True)))
            story.append(Spacer(1, 10))
            
            packet_data = [['Heure', 'Protocole', 'Source -> Destination', 'Information']]
            for packet in ettercap_analysis['intercepted_packets'][:15]:
                packet_data.append([
                    packet.get('timestamp', '-'),
                    packet.get('protocol', '-'),
                    f"{packet.get('source', '-')} -> {packet.get('destination', '-')}",
                    packet.get('info', '-')[:50] + '...' if len(packet.get('info', '')) > 50 else packet.get('info', '-')
                ])
            
            if len(ettercap_analysis['intercepted_packets']) > 15:
                packet_data.append(['...', '...', '...', f'... et {len(ettercap_analysis["intercepted_packets"]) - 15} autres paquets'])
            
            packet_table = Table(packet_data, colWidths=[60, 60, 140, 140])
            packet_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 7),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            story.append(packet_table)
            story.append(Spacer(1, 20))
        
        # Log technique
        story.append(Paragraph("Extrait du log technique :", self.get_colored_style('#6c757d', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et formater les r√©sultats
        cleaned_results = self._clean_ettercap_output(results)
        story.append(Paragraph(f"<font name='Courier' size='7'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_ettercap_recommendations(ettercap_analysis)
        story.append(Paragraph("Recommandations de securite reseau :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_ettercap_results(self, results, captured_data):
        """Analyse les r√©sultats d'une attaque Ettercap"""
        analysis = {
            'mitm_successful': False,
            'simulation_mode': False,
            'target_detected': False,
            'total_packets': 0,
            'http_packets': 0,
            'https_packets': 0,
            'dns_packets': 0,
            'attack_type': 'ARP Spoofing',
            'target_info': {},
            'intercepted_packets': [],
            'protocol_analysis': {}
        }
        
        try:
            # D√©tecter le mode simulation
            if 'simulation' in results.lower() or 'simule' in results.lower():
                analysis['simulation_mode'] = True
                analysis['mitm_successful'] = True
            
            # D√©tecter succ√®s MITM r√©el
            if 'arp poisoning' in results.lower() and 'actif' in results.lower():
                analysis['mitm_successful'] = True
            
            # Analyser les donn√©es captur√©es
            if captured_data:
                # Informations de la cible
                if 'target_info' in captured_data:
                    analysis['target_detected'] = True
                    analysis['target_info'] = captured_data['target_info']
                
                # Statistiques des paquets
                if 'statistics' in captured_data:
                    stats = captured_data['statistics']
                    analysis['total_packets'] = stats.get('total_packets', 0)
                    analysis['http_packets'] = stats.get('http_packets', 0)
                    analysis['https_packets'] = stats.get('https_packets', 0)
                    analysis['dns_packets'] = stats.get('dns_packets', 0)
                
                # Paquets intercept√©s
                if 'intercepted_packets' in captured_data:
                    analysis['intercepted_packets'] = captured_data['intercepted_packets']
                    
                    # Analyse des protocoles
                    for packet in analysis['intercepted_packets']:
                        protocol = packet.get('protocol', 'UNKNOWN')
                        analysis['protocol_analysis'][protocol] = analysis['protocol_analysis'].get(protocol, 0) + 1
            
        except Exception as e:
            print(f"[DEBUG] Erreur analyse Ettercap: {e}")
        
        return analysis

    def _clean_ettercap_output(self, results):
        """Nettoie la sortie Ettercap pour le PDF"""
        import re
        
        # Prendre les parties importantes
        lines = results.split('\n')
        important_lines = []
        
        for line in lines[:30]:
            if any(keyword in line.lower() for keyword in 
                   ['arp', 'poisoning', 'target', 'group', 'interface', 'attaque', 'mitm', 'scan']):
                important_lines.append(line.strip())
        
        if len(important_lines) < 10:
            important_lines = lines[:20]
        
        cleaned = '\n'.join(important_lines)
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', cleaned)
        cleaned = cleaned.replace('\n', '<br/>')
        
        if len(cleaned) > 2000:
            cleaned = cleaned[:2000] + '<br/>[... Log tronque pour le PDF ...]'
        
        return cleaned

    def _get_ettercap_recommendations(self, analysis):
        """Recommandations selon les r√©sultats Ettercap"""
        recommendations = []
        
        if analysis['mitm_successful']:
            if analysis['simulation_mode']:
                recommendations.extend([
                    "Test de simulation reussi - Votre reseau est vulnerable aux attaques MITM",
                    "Implementez une protection contre l'ARP spoofing",
                    "Configurez la securite des commutateurs (Port Security)"
                ])
            else:
                recommendations.extend([
                    "CRITIQUE : Attaque MITM reelle reussie sur votre reseau",
                    "URGENT : Isolez immediatement le reseau compromis",
                    "Verifiez tous les equipements reseau pour detecter d'autres attaques"
                ])
        
        if analysis['http_packets'] > 0:
            recommendations.append("Trafic HTTP non chiffre detecte - Migrez vers HTTPS")
        
        if analysis['dns_packets'] > 0:
            recommendations.append("Requetes DNS interceptees - Utilisez DNS over HTTPS (DoH)")
        
        recommendations.extend([
            "Configurez des tables ARP statiques pour les serveurs critiques",
            "Implementez une surveillance reseau continue (IDS/IPS)",
            "Utilisez des certificats TLS pour authentifier les communications",
            "Configurez VLAN pour segmenter le reseau",
            "Formez les equipes a detecter les attaques MITM",
            "Effectuez des tests de penetration reguliers",
            "Installez des systemes de detection d'ARP spoofing",
            "Implementez une politique de securite reseau stricte"
        ])
        
        return recommendations

    def generate_nmap_report(self, results, nmap_data):
        """Rapport sp√©cialis√© pour Nmap avec analyse des ports et services"""
        filename = f"nmap_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("Nmap", nmap_data.get('target', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† Rapport de Scan R√©seau Nmap", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des r√©sultats Nmap
        nmap_analysis = self._analyze_nmap_results(results)
        
        # Statut de s√©curit√©
        if nmap_analysis['critical_ports'] > 0:
            status_text = "üö® PORTS CRITIQUES OUVERTS D√âTECT√âS"
            status_color = '#dc3545'
            status_bg = colors.red
        elif nmap_analysis['total_open_ports'] > 10:
            status_text = "‚ö†Ô∏è NOMBREUX PORTS OUVERTS D√âTECT√âS"
            status_color = '#ffc107'
            status_bg = colors.orange
        elif nmap_analysis['total_open_ports'] > 0:
            status_text = "‚ÑπÔ∏è PORTS OUVERTS D√âTECT√âS"
            status_color = '#17a2b8'
            status_bg = colors.blue
        else:
            status_text = "‚úÖ AUCUN PORT OUVERT D√âTECT√â"
            status_color = '#28a745'
            status_bg = colors.green
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # R√©sum√© du scan
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üéØ Cible scann√©e', nmap_data.get('target', 'N/A')],
            ['üîç Type de scan', nmap_data.get('scan_type', 'Standard')],
            ['üö™ Ports ouverts', str(nmap_analysis['total_open_ports'])],
            ['‚ö†Ô∏è Ports critiques', str(nmap_analysis['critical_ports'])],
            ['üîí Ports ferm√©s', str(nmap_analysis['closed_ports'])],
            ['üõ°Ô∏è Services d√©tect√©s', str(len(nmap_analysis['services']))],
            ['üìÖ Date du scan', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Ports ouverts d√©taill√©s
        if nmap_analysis['open_ports']:
            story.append(Paragraph("üö™ Ports ouverts d√©tect√©s :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            ports_data = [['Port', 'Protocole', 'Service', 'Version', 'Risque']]
            for port_info in nmap_analysis['open_ports'][:15]:
                risk_level = self._get_port_risk_level(port_info['port'])
                ports_data.append([
                    str(port_info['port']),
                    port_info['protocol'],
                    port_info['service'],
                    port_info['version'][:30] + '...' if len(port_info['version']) > 30 else port_info['version'],
                    risk_level
                ])
            
            if len(nmap_analysis['open_ports']) > 15:
                ports_data.append(['...', '...', '...', f'... et {len(nmap_analysis["open_ports"]) - 15} autres ports', '...'])
            
            ports_table = Table(ports_data, colWidths=[50, 60, 80, 120, 80])
            ports_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            story.append(ports_table)
            story.append(Spacer(1, 20))
        
        # Services d√©tect√©s
        if nmap_analysis['services']:
            story.append(Paragraph("üõ°Ô∏è Services identifi√©s :", self.get_colored_style('#007bff', bold=True)))
            story.append(Spacer(1, 10))
            
            services_data = [['Service', 'Occurrences', 'Ports associ√©s']]
            for service, info in list(nmap_analysis['services'].items())[:10]:
                ports_list = ', '.join(map(str, info['ports'][:5]))
                if len(info['ports']) > 5:
                    ports_list += f" (+{len(info['ports'])-5})"
                
                services_data.append([
                    service,
                    str(info['count']),
                    ports_list
                ])
            
            services_table = Table(services_data, colWidths=[120, 80, 200])
            services_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(services_table)
            story.append(Spacer(1, 20))
        
        # Informations syst√®me
        if nmap_analysis['system_info']:
            story.append(Paragraph("üíª Informations syst√®me :", self.get_colored_style('#28a745', bold=True)))
            story.append(Spacer(1, 10))
            
            sys_data = [['Propri√©t√©', 'Valeur']]
            for key, value in nmap_analysis['system_info'].items():
                sys_data.append([key, value])
            
            sys_table = Table(sys_data, colWidths=[150, 250])
            sys_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.green),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(sys_table)
            story.append(Spacer(1, 20))
        
        # Log technique
        story.append(Paragraph("üîç Extrait du scan technique :", self.get_colored_style('#6c757d', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et formater les r√©sultats
        cleaned_results = self._clean_nmap_output(results)
        story.append(Paragraph(f"<font name='Courier' size='7'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_nmap_recommendations(nmap_analysis)
        story.append(Paragraph("üõ°Ô∏è Recommandations de s√©curit√© r√©seau :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_nmap_results(self, results):
        """Analyse les r√©sultats d'un scan Nmap"""
        import re
        
        analysis = {
            'total_open_ports': 0,
            'critical_ports': 0,
            'closed_ports': 0,
            'open_ports': [],
            'services': {},
            'system_info': {}
        }
        
        try:
            lines = results.split('\n')
            
            for line in lines:
                # D√©tecter ports ouverts
                port_match = re.match(r'(\d+)/(tcp|udp)\s+open\s+(\S+)(?:\s+(.+))?', line)
                if port_match:
                    port_num = int(port_match.group(1))
                    protocol = port_match.group(2)
                    service = port_match.group(3)
                    version = port_match.group(4) or 'Version non d√©tect√©e'
                    
                    analysis['total_open_ports'] += 1
                    
                    # Identifier ports critiques
                    if port_num in [21, 22, 23, 25, 53, 80, 135, 139, 443, 445, 993, 995, 3389]:
                        analysis['critical_ports'] += 1
                    
                    # Ajouter √† la liste des ports ouverts
                    analysis['open_ports'].append({
                        'port': port_num,
                        'protocol': protocol,
                        'service': service,
                        'version': version
                    })
                    
                    # Compter les services
                    if service not in analysis['services']:
                        analysis['services'][service] = {'count': 0, 'ports': []}
                    analysis['services'][service]['count'] += 1
                    analysis['services'][service]['ports'].append(port_num)
                
                # D√©tecter ports ferm√©s
                elif 'closed' in line and 'tcp' in line:
                    analysis['closed_ports'] += 1
                
                # D√©tecter informations syst√®me
                elif 'Running:' in line:
                    analysis['system_info']['OS'] = line.split('Running:')[1].strip()
                elif 'Device type:' in line:
                    analysis['system_info']['Type appareil'] = line.split('Device type:')[1].strip()
                elif 'MAC Address:' in line:
                    mac_match = re.search(r'([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})', line)
                    if mac_match:
                        analysis['system_info']['Adresse MAC'] = mac_match.group(0)
                elif 'Network Distance:' in line:
                    analysis['system_info']['Distance r√©seau'] = line.split('Network Distance:')[1].strip()
                elif 'latency' in line.lower():
                    latency_match = re.search(r'(\d+\.\d+)s latency', line)
                    if latency_match:
                        analysis['system_info']['Latence'] = latency_match.group(1) + 's'
            
        except Exception as e:
            print(f"[DEBUG] Erreur analyse Nmap: {e}")
        
        return analysis

    def _get_port_risk_level(self, port):
        """Retourne le niveau de risque selon le port"""
        critical_ports = [21, 23, 135, 139, 445, 3389]  # FTP, Telnet, RPC, NetBIOS, SMB, RDP
        high_risk_ports = [22, 25, 53, 80, 443, 993, 995]  # SSH, SMTP, DNS, HTTP, HTTPS, IMAPS, POP3S
        
        if port in critical_ports:
            return 'CRITIQUE'
        elif port in high_risk_ports:
            return '√âLEV√â'
        elif port < 1024:
            return 'MOYEN'
        return 'FAIBLE'

    def _clean_nmap_output(self, results):
        """Nettoie la sortie Nmap pour le PDF"""
        import re
        
        # Prendre les parties importantes
        lines = results.split('\n')
        important_lines = []
        
        for line in lines[:30]:
            if any(keyword in line.lower() for keyword in 
                   ['nmap scan', 'host is up', 'port', 'open', 'service', 'version', 'os', 'mac']):
                important_lines.append(line.strip())
        
        if len(important_lines) < 15:
            important_lines = lines[:25]
        
        cleaned = '\n'.join(important_lines)
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', cleaned)
        cleaned = cleaned.replace('\n', '<br/>')
        
        if len(cleaned) > 2000:
            cleaned = cleaned[:2000] + '<br/>[... Log tronqu√© pour le PDF ...]'
        
        return cleaned

    def _get_nmap_recommendations(self, analysis):
        """Recommandations selon les r√©sultats Nmap"""
        recommendations = []
        
        if analysis['critical_ports'] > 0:
            recommendations.extend([
                "üö® CRITIQUE : Des ports √† haut risque sont ouverts",
                "Fermez les ports non n√©cessaires (Telnet, FTP, NetBIOS, SMB)",
                "Renforcez l'authentification sur les services expos√©s"
            ])
        
        if analysis['total_open_ports'] > 10:
            recommendations.append("‚ö†Ô∏è Nombreux ports ouverts - Appliquez le principe du moindre privil√®ge")
        
        # Recommandations par service
        services = analysis.get('services', {})
        if 'ssh' in services:
            recommendations.append("üîë SSH d√©tect√© - Utilisez l'authentification par cl√©s et d√©sactivez root")
        if 'http' in services:
            recommendations.append("üîí HTTP d√©tect√© - Migrez vers HTTPS avec certificats valides")
        if 'ftp' in services:
            recommendations.append("üìÅ FTP d√©tect√© - Remplacez par SFTP ou FTPS")
        
        recommendations.extend([
            "üõ°Ô∏è Configurez un pare-feu pour filtrer le trafic entrant",
            "üìä Surveillez r√©guli√®rement les ports ouverts avec Nmap",
            "üîÑ Effectuez des scans p√©riodiques pour d√©tecter les changements",
            "üë• Formez les √©quipes aux bonnes pratiques de s√©curit√© r√©seau",
            "üìã Documentez et justifiez chaque port ouvert",
            "üîç Impl√©mentez une surveillance r√©seau continue (SIEM)",
            "‚ö° Mettez √† jour r√©guli√®rement les services expos√©s"
        ])
        
        return recommendations

    def generate_sslyze_report(self, results, sslyze_data):
        """Rapport sp√©cialis√© pour SSLyze avec analyse SSL/TLS"""
        filename = f"sslyze_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=20, bottomMargin=20)
        story = []
        
        # Header
        story.extend(self._create_header("SSLyze", sslyze_data.get('target', 'N/A')))
        
        # Titre section
        story.append(Paragraph("‚ñ† Rapport d'Analyse SSL/TLS SSLyze", self.styles['section_title']))
        story.append(Spacer(1, 10))
        
        # Analyse des r√©sultats SSLyze
        sslyze_analysis = self._analyze_sslyze_results(results)
        
        # Statut de s√©curit√© SSL
        if sslyze_analysis['critical_issues'] > 0:
            status_text = "üö® PROBL√àMES CRITIQUES SSL/TLS D√âTECT√âS"
            status_color = '#dc3545'
            status_bg = colors.red
        elif sslyze_analysis['warnings'] > 0:
            status_text = "‚ö†Ô∏è AVERTISSEMENTS SSL/TLS D√âTECT√âS"
            status_color = '#ffc107'
            status_bg = colors.orange
        elif sslyze_analysis['ssl_configured']:
            status_text = "‚úÖ CONFIGURATION SSL/TLS S√âCURIS√âE"
            status_color = '#28a745'
            status_bg = colors.green
        else:
            status_text = "‚ùå SSL/TLS NON CONFIGUR√â OU INACCESSIBLE"
            status_color = '#6c757d'
            status_bg = colors.gray
        
        story.append(Paragraph(status_text, self.get_colored_style(status_color, bold=True, size=16)))
        story.append(Spacer(1, 15))
        
        # R√©sum√© de l'analyse
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['üéØ Domaine analys√©', sslyze_data.get('domain', 'N/A')],
            ['üîí SSL/TLS configur√©', 'Oui' if sslyze_analysis['ssl_configured'] else 'Non'],
            ['üö® Probl√®mes critiques', str(sslyze_analysis['critical_issues'])],
            ['‚ö†Ô∏è Avertissements', str(sslyze_analysis['warnings'])],
            ['üîë Certificat valide', 'Oui' if sslyze_analysis['cert_valid'] else 'Non'],
            ['üõ°Ô∏è Protocoles support√©s', str(len(sslyze_analysis['protocols']))],
            ['üìÖ Date d\'analyse', datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')]
        ]
        
        summary_table = Table(summary_data, colWidths=[180, 220])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), status_bg),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Protocoles SSL/TLS support√©s
        if sslyze_analysis['protocols']:
            story.append(Paragraph("üîí Protocoles SSL/TLS support√©s :", self.get_colored_style('#007bff', bold=True)))
            story.append(Spacer(1, 10))
            
            protocol_data = [['Protocole', 'Statut', 'S√©curit√©']]
            for protocol, status in sslyze_analysis['protocols'].items():
                security_level = self._get_ssl_security_level(protocol)
                protocol_data.append([protocol, status, security_level])
            
            protocol_table = Table(protocol_data, colWidths=[120, 120, 160])
            protocol_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(protocol_table)
            story.append(Spacer(1, 20))
        
        # Informations du certificat
        if sslyze_analysis['certificate_info']:
            story.append(Paragraph("üìú Informations du certificat :", self.get_colored_style('#28a745', bold=True)))
            story.append(Spacer(1, 10))
            
            cert_data = [['Propri√©t√©', 'Valeur']]
            for key, value in sslyze_analysis['certificate_info'].items():
                cert_data.append([key, value])
            
            cert_table = Table(cert_data, colWidths=[150, 250])
            cert_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.green),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(cert_table)
            story.append(Spacer(1, 20))
        
        # Vuln√©rabilit√©s d√©tect√©es
        if sslyze_analysis['vulnerabilities']:
            story.append(Paragraph("üö® Vuln√©rabilit√©s SSL/TLS d√©tect√©es :", self.get_colored_style('#dc3545', bold=True)))
            story.append(Spacer(1, 10))
            
            vuln_data = [['Vuln√©rabilit√©', 'Gravit√©', 'Description']]
            for vuln in sslyze_analysis['vulnerabilities']:
                vuln_data.append([vuln['name'], vuln['severity'], vuln['description']])
            
            vuln_table = Table(vuln_data, colWidths=[120, 80, 200])
            vuln_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightcoral),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            story.append(vuln_table)
            story.append(Spacer(1, 20))
        
        # Log technique
        story.append(Paragraph("üîç Extrait du rapport technique :", self.get_colored_style('#6c757d', bold=True)))
        story.append(Spacer(1, 10))
        
        # Nettoyer et formater les r√©sultats
        cleaned_results = self._clean_sslyze_output(results)
        story.append(Paragraph(f"<font name='Courier' size='7'>{cleaned_results}</font>", self.styles['normal']))
        story.append(Spacer(1, 20))
        
        # Recommandations
        recommendations = self._get_sslyze_recommendations(sslyze_analysis)
        story.append(Paragraph("üõ°Ô∏è Recommandations de s√©curit√© SSL/TLS :", self.get_colored_style('#dc3545', bold=True)))
        story.append(Spacer(1, 10))
        for rec in recommendations:
            story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['normal']))
            story.append(Spacer(1, 5))
        
        doc.build(story)
        return filename

    def _analyze_sslyze_results(self, results):
        """Analyse les r√©sultats SSLyze"""
        import re
        
        analysis = {
            'ssl_configured': False,
            'cert_valid': False,
            'critical_issues': 0,
            'warnings': 0,
            'protocols': {},
            'certificate_info': {},
            'vulnerabilities': []
        }
        
        try:
            lines = results.split('\n')
            
            for line in lines:
                # D√©tecter si SSL est configur√©
                if 'SSL' in line or 'TLS' in line:
                    analysis['ssl_configured'] = True
                
                # D√©tecter protocoles support√©s
                if re.search(r'(SSL|TLS)v?\d+\.\d+', line):
                    protocol_match = re.search(r'(SSL|TLS)v?(\d+\.\d+)', line)
                    if protocol_match:
                        protocol = protocol_match.group(0)
                        if 'Supported' in line or 'ACCEPTED' in line:
                            analysis['protocols'][protocol] = 'Support√©'
                        elif 'Not Supported' in line or 'REJECTED' in line:
                            analysis['protocols'][protocol] = 'Non support√©'
                
                # D√©tecter certificat valide
                if 'Certificate' in line and 'Valid' in line:
                    analysis['cert_valid'] = True
                
                # D√©tecter probl√®mes critiques
                if any(issue in line.lower() for issue in ['vulnerable', 'insecure', 'weak', 'deprecated']):
                    analysis['critical_issues'] += 1
                
                # D√©tecter avertissements
                if any(warning in line.lower() for warning in ['warning', 'caution', 'notice']):
                    analysis['warnings'] += 1
                
                # Extraire infos certificat
                if 'Subject:' in line:
                    analysis['certificate_info']['Sujet'] = line.split('Subject:')[1].strip()
                elif 'Issuer:' in line:
                    analysis['certificate_info']['√âmetteur'] = line.split('Issuer:')[1].strip()
                elif 'Serial Number:' in line:
                    analysis['certificate_info']['Num√©ro de s√©rie'] = line.split('Serial Number:')[1].strip()
                
            # Analyser vuln√©rabilit√©s connues
            if 'ROBOT' in results:
                analysis['vulnerabilities'].append({
                    'name': 'ROBOT Attack',
                    'severity': '√âLEV√â',
                    'description': 'Vuln√©rabilit√© dans l\'impl√©mentation RSA'
                })
            
            if 'Heartbleed' in results:
                analysis['vulnerabilities'].append({
                    'name': 'Heartbleed',
                    'severity': 'CRITIQUE',
                    'description': 'Fuite de m√©moire OpenSSL'
                })
                
        except Exception as e:
            print(f"[DEBUG] Erreur analyse SSLyze: {e}")
        
        return analysis

    def _get_ssl_security_level(self, protocol):
        """Retourne le niveau de s√©curit√© du protocole SSL/TLS"""
        if 'SSL' in protocol or 'TLS1.0' in protocol or 'TLS1.1' in protocol:
            return 'OBSOL√àTE - DANGEREUX'
        elif 'TLS1.2' in protocol:
            return 'ACCEPTABLE'
        elif 'TLS1.3' in protocol:
            return 'RECOMMAND√â'
        return 'INCONNU'

    def _clean_sslyze_output(self, results):
        """Nettoie la sortie SSLyze pour le PDF"""
        import re
        
        # Prendre les parties importantes
        lines = results.split('\n')
        important_lines = []
        
        for line in lines[:40]:
            if any(keyword in line.lower() for keyword in 
                   ['ssl', 'tls', 'certificate', 'cipher', 'protocol', 'vulnerability']):
                important_lines.append(line.strip())
        
        if len(important_lines) < 20:
            important_lines = lines[:30]
        
        cleaned = '\n'.join(important_lines)
        cleaned = re.sub(r'[^\x20-\x7E\n]', '', cleaned)
        cleaned = cleaned.replace('\n', '<br/>')
        
        if len(cleaned) > 2000:
            cleaned = cleaned[:2000] + '<br/>[... Log tronqu√© pour le PDF ...]'
        
        return cleaned

    def _get_sslyze_recommendations(self, analysis):
        """Recommandations selon les r√©sultats SSLyze"""
        recommendations = []
        
        if analysis['critical_issues'] > 0:
            recommendations.extend([
                "üö® URGENT : Corrigez les vuln√©rabilit√©s SSL/TLS critiques d√©tect√©es",
                "Mettez √† jour imm√©diatement votre configuration SSL/TLS",
                "D√©sactivez les protocoles et chiffrements obsol√®tes"
            ])
        
        if not analysis['ssl_configured']:
            recommendations.append("üîí CRITIQUE : Configurez SSL/TLS sur votre serveur")
        
        if not analysis['cert_valid']:
            recommendations.append("üìú Installez un certificat SSL/TLS valide et v√©rifi√©")
        
        # Recommandations par protocole
        protocols = analysis.get('protocols', {})
        for protocol, status in protocols.items():
            if status == 'Support√©' and ('SSL' in protocol or 'TLS1.0' in protocol or 'TLS1.1' in protocol):
                recommendations.append(f"‚ö†Ô∏è D√©sactivez le protocole obsol√®te {protocol}")
        
        if 'TLS1.3' not in [p for p in protocols.keys() if protocols[p] == 'Support√©']:
            recommendations.append("üîê Activez TLS 1.3 pour une s√©curit√© optimale")
        
        recommendations.extend([
            "üõ°Ô∏è Configurez des suites de chiffrement s√©curis√©es uniquement",
            "üìä Effectuez des tests SSL/TLS r√©guliers avec SSLyze",
            "üîÑ Mettez √† jour r√©guli√®rement vos certificats SSL/TLS",
            "üë• Formez les √©quipes aux bonnes pratiques SSL/TLS",
            "üìã Impl√©mentez HSTS (HTTP Strict Transport Security)",
            "üîç Surveillez l'expiration des certificats",
            "‚ö° Utilisez des certificats avec des algorithmes SHA-256 ou sup√©rieurs"
        ])
        
        return recommendations

    def generate_generic_report(self, tool_name, results, target=None, summary_data=None):
        """Rapport g√©n√©rique pour tous les autres outils"""
        # G√©rer sp√©cialement Nikto
        if tool_name == "Nikto" and isinstance(results, str):
            return self.generate_nikto_report(results, target)
        
        # G√©rer sp√©cialement Acunetix
        if tool_name == "Acunetix" and isinstance(results, str):
            try:
                import json
                acunetix_data = json.loads(results)
                return self.generate_acunetix_report(acunetix_data, target)
            except:
                pass  # Continuer avec le rapport g√©n√©rique si JSON √©choue
        
        tool_clean = tool_name.lower().replace(' ', '_').replace('/', '_')
        filename = f"{tool_clean}_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.reports_dir, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        self._create_header_old(story, tool_name, target)
        
        # R√©sum√© si fourni
        if summary_data:
            story.append(Paragraph("üìä R√©sum√©", self.styles['SDVHeader']))
            summary_table = Table(summary_data, colWidths=[2*inch, 3*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#007bff')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(summary_table)
            story.append(Spacer(1, 20))
        
        # R√©sultats
        story.append(Paragraph(f"üìã R√©sultats de {tool_name}", self.styles['SDVHeader']))
        
        # Nettoyer et limiter les r√©sultats
        if isinstance(results, str):
            results_clean = results.replace('\n', '<br/>')
            if len(results_clean) > 4000:
                results_clean = results_clean[:4000] + '<br/><br/>[... R√©sultats tronqu√©s ...]'
            story.append(Paragraph(results_clean, self.styles['CodeBlock']))
        else:
            story.append(Paragraph(str(results), self.styles['CodeBlock']))
        
        doc.build(story)
        return filename
